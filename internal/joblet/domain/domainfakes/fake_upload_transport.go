// Code generated by counterfeiter. DO NOT EDIT.
package domainfakes

import (
	"io"
	"joblet/internal/joblet/domain"
	"sync"
)

type FakeUploadTransport struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	GetReaderStub        func() (io.ReadCloser, error)
	getReaderMutex       sync.RWMutex
	getReaderArgsForCall []struct {
	}
	getReaderReturns struct {
		result1 io.ReadCloser
		result2 error
	}
	getReaderReturnsOnCall map[int]struct {
		result1 io.ReadCloser
		result2 error
	}
	GetWriterStub        func() (io.WriteCloser, error)
	getWriterMutex       sync.RWMutex
	getWriterArgsForCall []struct {
	}
	getWriterReturns struct {
		result1 io.WriteCloser
		result2 error
	}
	getWriterReturnsOnCall map[int]struct {
		result1 io.WriteCloser
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUploadTransport) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUploadTransport) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeUploadTransport) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeUploadTransport) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUploadTransport) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUploadTransport) GetReader() (io.ReadCloser, error) {
	fake.getReaderMutex.Lock()
	ret, specificReturn := fake.getReaderReturnsOnCall[len(fake.getReaderArgsForCall)]
	fake.getReaderArgsForCall = append(fake.getReaderArgsForCall, struct {
	}{})
	stub := fake.GetReaderStub
	fakeReturns := fake.getReaderReturns
	fake.recordInvocation("GetReader", []interface{}{})
	fake.getReaderMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUploadTransport) GetReaderCallCount() int {
	fake.getReaderMutex.RLock()
	defer fake.getReaderMutex.RUnlock()
	return len(fake.getReaderArgsForCall)
}

func (fake *FakeUploadTransport) GetReaderCalls(stub func() (io.ReadCloser, error)) {
	fake.getReaderMutex.Lock()
	defer fake.getReaderMutex.Unlock()
	fake.GetReaderStub = stub
}

func (fake *FakeUploadTransport) GetReaderReturns(result1 io.ReadCloser, result2 error) {
	fake.getReaderMutex.Lock()
	defer fake.getReaderMutex.Unlock()
	fake.GetReaderStub = nil
	fake.getReaderReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeUploadTransport) GetReaderReturnsOnCall(i int, result1 io.ReadCloser, result2 error) {
	fake.getReaderMutex.Lock()
	defer fake.getReaderMutex.Unlock()
	fake.GetReaderStub = nil
	if fake.getReaderReturnsOnCall == nil {
		fake.getReaderReturnsOnCall = make(map[int]struct {
			result1 io.ReadCloser
			result2 error
		})
	}
	fake.getReaderReturnsOnCall[i] = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeUploadTransport) GetWriter() (io.WriteCloser, error) {
	fake.getWriterMutex.Lock()
	ret, specificReturn := fake.getWriterReturnsOnCall[len(fake.getWriterArgsForCall)]
	fake.getWriterArgsForCall = append(fake.getWriterArgsForCall, struct {
	}{})
	stub := fake.GetWriterStub
	fakeReturns := fake.getWriterReturns
	fake.recordInvocation("GetWriter", []interface{}{})
	fake.getWriterMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUploadTransport) GetWriterCallCount() int {
	fake.getWriterMutex.RLock()
	defer fake.getWriterMutex.RUnlock()
	return len(fake.getWriterArgsForCall)
}

func (fake *FakeUploadTransport) GetWriterCalls(stub func() (io.WriteCloser, error)) {
	fake.getWriterMutex.Lock()
	defer fake.getWriterMutex.Unlock()
	fake.GetWriterStub = stub
}

func (fake *FakeUploadTransport) GetWriterReturns(result1 io.WriteCloser, result2 error) {
	fake.getWriterMutex.Lock()
	defer fake.getWriterMutex.Unlock()
	fake.GetWriterStub = nil
	fake.getWriterReturns = struct {
		result1 io.WriteCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeUploadTransport) GetWriterReturnsOnCall(i int, result1 io.WriteCloser, result2 error) {
	fake.getWriterMutex.Lock()
	defer fake.getWriterMutex.Unlock()
	fake.GetWriterStub = nil
	if fake.getWriterReturnsOnCall == nil {
		fake.getWriterReturnsOnCall = make(map[int]struct {
			result1 io.WriteCloser
			result2 error
		})
	}
	fake.getWriterReturnsOnCall[i] = struct {
		result1 io.WriteCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeUploadTransport) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUploadTransport) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.UploadTransport = new(FakeUploadTransport)
