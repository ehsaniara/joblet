// Code generated by counterfeiter. DO NOT EDIT.
package domainfakes

import (
	"joblet/internal/joblet/domain"
	"sync"
)

type FakeUploadStreamer struct {
	GetJobIDStub        func() string
	getJobIDMutex       sync.RWMutex
	getJobIDArgsForCall []struct {
	}
	getJobIDReturns struct {
		result1 string
	}
	getJobIDReturnsOnCall map[int]struct {
		result1 string
	}
	GetTransportStub        func() domain.UploadTransport
	getTransportMutex       sync.RWMutex
	getTransportArgsForCall []struct {
	}
	getTransportReturns struct {
		result1 domain.UploadTransport
	}
	getTransportReturnsOnCall map[int]struct {
		result1 domain.UploadTransport
	}
	SetManagerStub        func(domain.UploadManager)
	setManagerMutex       sync.RWMutex
	setManagerArgsForCall []struct {
		arg1 domain.UploadManager
	}
	StartStub        func() error
	startMutex       sync.RWMutex
	startArgsForCall []struct {
	}
	startReturns struct {
		result1 error
	}
	startReturnsOnCall map[int]struct {
		result1 error
	}
	StopStub        func() error
	stopMutex       sync.RWMutex
	stopArgsForCall []struct {
	}
	stopReturns struct {
		result1 error
	}
	stopReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUploadStreamer) GetJobID() string {
	fake.getJobIDMutex.Lock()
	ret, specificReturn := fake.getJobIDReturnsOnCall[len(fake.getJobIDArgsForCall)]
	fake.getJobIDArgsForCall = append(fake.getJobIDArgsForCall, struct {
	}{})
	stub := fake.GetJobIDStub
	fakeReturns := fake.getJobIDReturns
	fake.recordInvocation("GetJobID", []interface{}{})
	fake.getJobIDMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUploadStreamer) GetJobIDCallCount() int {
	fake.getJobIDMutex.RLock()
	defer fake.getJobIDMutex.RUnlock()
	return len(fake.getJobIDArgsForCall)
}

func (fake *FakeUploadStreamer) GetJobIDCalls(stub func() string) {
	fake.getJobIDMutex.Lock()
	defer fake.getJobIDMutex.Unlock()
	fake.GetJobIDStub = stub
}

func (fake *FakeUploadStreamer) GetJobIDReturns(result1 string) {
	fake.getJobIDMutex.Lock()
	defer fake.getJobIDMutex.Unlock()
	fake.GetJobIDStub = nil
	fake.getJobIDReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeUploadStreamer) GetJobIDReturnsOnCall(i int, result1 string) {
	fake.getJobIDMutex.Lock()
	defer fake.getJobIDMutex.Unlock()
	fake.GetJobIDStub = nil
	if fake.getJobIDReturnsOnCall == nil {
		fake.getJobIDReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getJobIDReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeUploadStreamer) GetTransport() domain.UploadTransport {
	fake.getTransportMutex.Lock()
	ret, specificReturn := fake.getTransportReturnsOnCall[len(fake.getTransportArgsForCall)]
	fake.getTransportArgsForCall = append(fake.getTransportArgsForCall, struct {
	}{})
	stub := fake.GetTransportStub
	fakeReturns := fake.getTransportReturns
	fake.recordInvocation("GetTransport", []interface{}{})
	fake.getTransportMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUploadStreamer) GetTransportCallCount() int {
	fake.getTransportMutex.RLock()
	defer fake.getTransportMutex.RUnlock()
	return len(fake.getTransportArgsForCall)
}

func (fake *FakeUploadStreamer) GetTransportCalls(stub func() domain.UploadTransport) {
	fake.getTransportMutex.Lock()
	defer fake.getTransportMutex.Unlock()
	fake.GetTransportStub = stub
}

func (fake *FakeUploadStreamer) GetTransportReturns(result1 domain.UploadTransport) {
	fake.getTransportMutex.Lock()
	defer fake.getTransportMutex.Unlock()
	fake.GetTransportStub = nil
	fake.getTransportReturns = struct {
		result1 domain.UploadTransport
	}{result1}
}

func (fake *FakeUploadStreamer) GetTransportReturnsOnCall(i int, result1 domain.UploadTransport) {
	fake.getTransportMutex.Lock()
	defer fake.getTransportMutex.Unlock()
	fake.GetTransportStub = nil
	if fake.getTransportReturnsOnCall == nil {
		fake.getTransportReturnsOnCall = make(map[int]struct {
			result1 domain.UploadTransport
		})
	}
	fake.getTransportReturnsOnCall[i] = struct {
		result1 domain.UploadTransport
	}{result1}
}

func (fake *FakeUploadStreamer) SetManager(arg1 domain.UploadManager) {
	fake.setManagerMutex.Lock()
	fake.setManagerArgsForCall = append(fake.setManagerArgsForCall, struct {
		arg1 domain.UploadManager
	}{arg1})
	stub := fake.SetManagerStub
	fake.recordInvocation("SetManager", []interface{}{arg1})
	fake.setManagerMutex.Unlock()
	if stub != nil {
		fake.SetManagerStub(arg1)
	}
}

func (fake *FakeUploadStreamer) SetManagerCallCount() int {
	fake.setManagerMutex.RLock()
	defer fake.setManagerMutex.RUnlock()
	return len(fake.setManagerArgsForCall)
}

func (fake *FakeUploadStreamer) SetManagerCalls(stub func(domain.UploadManager)) {
	fake.setManagerMutex.Lock()
	defer fake.setManagerMutex.Unlock()
	fake.SetManagerStub = stub
}

func (fake *FakeUploadStreamer) SetManagerArgsForCall(i int) domain.UploadManager {
	fake.setManagerMutex.RLock()
	defer fake.setManagerMutex.RUnlock()
	argsForCall := fake.setManagerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUploadStreamer) Start() error {
	fake.startMutex.Lock()
	ret, specificReturn := fake.startReturnsOnCall[len(fake.startArgsForCall)]
	fake.startArgsForCall = append(fake.startArgsForCall, struct {
	}{})
	stub := fake.StartStub
	fakeReturns := fake.startReturns
	fake.recordInvocation("Start", []interface{}{})
	fake.startMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUploadStreamer) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *FakeUploadStreamer) StartCalls(stub func() error) {
	fake.startMutex.Lock()
	defer fake.startMutex.Unlock()
	fake.StartStub = stub
}

func (fake *FakeUploadStreamer) StartReturns(result1 error) {
	fake.startMutex.Lock()
	defer fake.startMutex.Unlock()
	fake.StartStub = nil
	fake.startReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUploadStreamer) StartReturnsOnCall(i int, result1 error) {
	fake.startMutex.Lock()
	defer fake.startMutex.Unlock()
	fake.StartStub = nil
	if fake.startReturnsOnCall == nil {
		fake.startReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.startReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUploadStreamer) Stop() error {
	fake.stopMutex.Lock()
	ret, specificReturn := fake.stopReturnsOnCall[len(fake.stopArgsForCall)]
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct {
	}{})
	stub := fake.StopStub
	fakeReturns := fake.stopReturns
	fake.recordInvocation("Stop", []interface{}{})
	fake.stopMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUploadStreamer) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakeUploadStreamer) StopCalls(stub func() error) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = stub
}

func (fake *FakeUploadStreamer) StopReturns(result1 error) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = nil
	fake.stopReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUploadStreamer) StopReturnsOnCall(i int, result1 error) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = nil
	if fake.stopReturnsOnCall == nil {
		fake.stopReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.stopReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUploadStreamer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUploadStreamer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.UploadStreamer = new(FakeUploadStreamer)
