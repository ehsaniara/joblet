// Code generated by counterfeiter. DO NOT EDIT.
package statefakes

import (
	"joblet/internal/joblet/network"
	"joblet/internal/joblet/state"
	"sync"
)

type FakeDNSManager struct {
	CleanupJobDNSStub        func(string) error
	cleanupJobDNSMutex       sync.RWMutex
	cleanupJobDNSArgsForCall []struct {
		arg1 string
	}
	cleanupJobDNSReturns struct {
		result1 error
	}
	cleanupJobDNSReturnsOnCall map[int]struct {
		result1 error
	}
	SetupJobDNSStub        func(int, *network.JobAllocation, map[string]*network.JobAllocation) error
	setupJobDNSMutex       sync.RWMutex
	setupJobDNSArgsForCall []struct {
		arg1 int
		arg2 *network.JobAllocation
		arg3 map[string]*network.JobAllocation
	}
	setupJobDNSReturns struct {
		result1 error
	}
	setupJobDNSReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateNetworkDNSStub        func(string, []*network.JobAllocation) error
	updateNetworkDNSMutex       sync.RWMutex
	updateNetworkDNSArgsForCall []struct {
		arg1 string
		arg2 []*network.JobAllocation
	}
	updateNetworkDNSReturns struct {
		result1 error
	}
	updateNetworkDNSReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDNSManager) CleanupJobDNS(arg1 string) error {
	fake.cleanupJobDNSMutex.Lock()
	ret, specificReturn := fake.cleanupJobDNSReturnsOnCall[len(fake.cleanupJobDNSArgsForCall)]
	fake.cleanupJobDNSArgsForCall = append(fake.cleanupJobDNSArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.CleanupJobDNSStub
	fakeReturns := fake.cleanupJobDNSReturns
	fake.recordInvocation("CleanupJobDNS", []interface{}{arg1})
	fake.cleanupJobDNSMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDNSManager) CleanupJobDNSCallCount() int {
	fake.cleanupJobDNSMutex.RLock()
	defer fake.cleanupJobDNSMutex.RUnlock()
	return len(fake.cleanupJobDNSArgsForCall)
}

func (fake *FakeDNSManager) CleanupJobDNSCalls(stub func(string) error) {
	fake.cleanupJobDNSMutex.Lock()
	defer fake.cleanupJobDNSMutex.Unlock()
	fake.CleanupJobDNSStub = stub
}

func (fake *FakeDNSManager) CleanupJobDNSArgsForCall(i int) string {
	fake.cleanupJobDNSMutex.RLock()
	defer fake.cleanupJobDNSMutex.RUnlock()
	argsForCall := fake.cleanupJobDNSArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDNSManager) CleanupJobDNSReturns(result1 error) {
	fake.cleanupJobDNSMutex.Lock()
	defer fake.cleanupJobDNSMutex.Unlock()
	fake.CleanupJobDNSStub = nil
	fake.cleanupJobDNSReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) CleanupJobDNSReturnsOnCall(i int, result1 error) {
	fake.cleanupJobDNSMutex.Lock()
	defer fake.cleanupJobDNSMutex.Unlock()
	fake.CleanupJobDNSStub = nil
	if fake.cleanupJobDNSReturnsOnCall == nil {
		fake.cleanupJobDNSReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cleanupJobDNSReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) SetupJobDNS(arg1 int, arg2 *network.JobAllocation, arg3 map[string]*network.JobAllocation) error {
	fake.setupJobDNSMutex.Lock()
	ret, specificReturn := fake.setupJobDNSReturnsOnCall[len(fake.setupJobDNSArgsForCall)]
	fake.setupJobDNSArgsForCall = append(fake.setupJobDNSArgsForCall, struct {
		arg1 int
		arg2 *network.JobAllocation
		arg3 map[string]*network.JobAllocation
	}{arg1, arg2, arg3})
	stub := fake.SetupJobDNSStub
	fakeReturns := fake.setupJobDNSReturns
	fake.recordInvocation("SetupJobDNS", []interface{}{arg1, arg2, arg3})
	fake.setupJobDNSMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDNSManager) SetupJobDNSCallCount() int {
	fake.setupJobDNSMutex.RLock()
	defer fake.setupJobDNSMutex.RUnlock()
	return len(fake.setupJobDNSArgsForCall)
}

func (fake *FakeDNSManager) SetupJobDNSCalls(stub func(int, *network.JobAllocation, map[string]*network.JobAllocation) error) {
	fake.setupJobDNSMutex.Lock()
	defer fake.setupJobDNSMutex.Unlock()
	fake.SetupJobDNSStub = stub
}

func (fake *FakeDNSManager) SetupJobDNSArgsForCall(i int) (int, *network.JobAllocation, map[string]*network.JobAllocation) {
	fake.setupJobDNSMutex.RLock()
	defer fake.setupJobDNSMutex.RUnlock()
	argsForCall := fake.setupJobDNSArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeDNSManager) SetupJobDNSReturns(result1 error) {
	fake.setupJobDNSMutex.Lock()
	defer fake.setupJobDNSMutex.Unlock()
	fake.SetupJobDNSStub = nil
	fake.setupJobDNSReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) SetupJobDNSReturnsOnCall(i int, result1 error) {
	fake.setupJobDNSMutex.Lock()
	defer fake.setupJobDNSMutex.Unlock()
	fake.SetupJobDNSStub = nil
	if fake.setupJobDNSReturnsOnCall == nil {
		fake.setupJobDNSReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setupJobDNSReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) UpdateNetworkDNS(arg1 string, arg2 []*network.JobAllocation) error {
	var arg2Copy []*network.JobAllocation
	if arg2 != nil {
		arg2Copy = make([]*network.JobAllocation, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.updateNetworkDNSMutex.Lock()
	ret, specificReturn := fake.updateNetworkDNSReturnsOnCall[len(fake.updateNetworkDNSArgsForCall)]
	fake.updateNetworkDNSArgsForCall = append(fake.updateNetworkDNSArgsForCall, struct {
		arg1 string
		arg2 []*network.JobAllocation
	}{arg1, arg2Copy})
	stub := fake.UpdateNetworkDNSStub
	fakeReturns := fake.updateNetworkDNSReturns
	fake.recordInvocation("UpdateNetworkDNS", []interface{}{arg1, arg2Copy})
	fake.updateNetworkDNSMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDNSManager) UpdateNetworkDNSCallCount() int {
	fake.updateNetworkDNSMutex.RLock()
	defer fake.updateNetworkDNSMutex.RUnlock()
	return len(fake.updateNetworkDNSArgsForCall)
}

func (fake *FakeDNSManager) UpdateNetworkDNSCalls(stub func(string, []*network.JobAllocation) error) {
	fake.updateNetworkDNSMutex.Lock()
	defer fake.updateNetworkDNSMutex.Unlock()
	fake.UpdateNetworkDNSStub = stub
}

func (fake *FakeDNSManager) UpdateNetworkDNSArgsForCall(i int) (string, []*network.JobAllocation) {
	fake.updateNetworkDNSMutex.RLock()
	defer fake.updateNetworkDNSMutex.RUnlock()
	argsForCall := fake.updateNetworkDNSArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDNSManager) UpdateNetworkDNSReturns(result1 error) {
	fake.updateNetworkDNSMutex.Lock()
	defer fake.updateNetworkDNSMutex.Unlock()
	fake.UpdateNetworkDNSStub = nil
	fake.updateNetworkDNSReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) UpdateNetworkDNSReturnsOnCall(i int, result1 error) {
	fake.updateNetworkDNSMutex.Lock()
	defer fake.updateNetworkDNSMutex.Unlock()
	fake.UpdateNetworkDNSStub = nil
	if fake.updateNetworkDNSReturnsOnCall == nil {
		fake.updateNetworkDNSReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateNetworkDNSReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDNSManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ state.DNSManager = new(FakeDNSManager)
