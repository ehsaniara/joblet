// Code generated by counterfeiter. DO NOT EDIT.
package statefakes

import (
	"joblet/internal/joblet/state"
	"sync"
)

type FakeNetworkValidator struct {
	ValidateBridgeNameStub        func(string) error
	validateBridgeNameMutex       sync.RWMutex
	validateBridgeNameArgsForCall []struct {
		arg1 string
	}
	validateBridgeNameReturns struct {
		result1 error
	}
	validateBridgeNameReturnsOnCall map[int]struct {
		result1 error
	}
	ValidateCIDRStub        func(string, map[string]string) error
	validateCIDRMutex       sync.RWMutex
	validateCIDRArgsForCall []struct {
		arg1 string
		arg2 map[string]string
	}
	validateCIDRReturns struct {
		result1 error
	}
	validateCIDRReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNetworkValidator) ValidateBridgeName(arg1 string) error {
	fake.validateBridgeNameMutex.Lock()
	ret, specificReturn := fake.validateBridgeNameReturnsOnCall[len(fake.validateBridgeNameArgsForCall)]
	fake.validateBridgeNameArgsForCall = append(fake.validateBridgeNameArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ValidateBridgeNameStub
	fakeReturns := fake.validateBridgeNameReturns
	fake.recordInvocation("ValidateBridgeName", []interface{}{arg1})
	fake.validateBridgeNameMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNetworkValidator) ValidateBridgeNameCallCount() int {
	fake.validateBridgeNameMutex.RLock()
	defer fake.validateBridgeNameMutex.RUnlock()
	return len(fake.validateBridgeNameArgsForCall)
}

func (fake *FakeNetworkValidator) ValidateBridgeNameCalls(stub func(string) error) {
	fake.validateBridgeNameMutex.Lock()
	defer fake.validateBridgeNameMutex.Unlock()
	fake.ValidateBridgeNameStub = stub
}

func (fake *FakeNetworkValidator) ValidateBridgeNameArgsForCall(i int) string {
	fake.validateBridgeNameMutex.RLock()
	defer fake.validateBridgeNameMutex.RUnlock()
	argsForCall := fake.validateBridgeNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNetworkValidator) ValidateBridgeNameReturns(result1 error) {
	fake.validateBridgeNameMutex.Lock()
	defer fake.validateBridgeNameMutex.Unlock()
	fake.ValidateBridgeNameStub = nil
	fake.validateBridgeNameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworkValidator) ValidateBridgeNameReturnsOnCall(i int, result1 error) {
	fake.validateBridgeNameMutex.Lock()
	defer fake.validateBridgeNameMutex.Unlock()
	fake.ValidateBridgeNameStub = nil
	if fake.validateBridgeNameReturnsOnCall == nil {
		fake.validateBridgeNameReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateBridgeNameReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworkValidator) ValidateCIDR(arg1 string, arg2 map[string]string) error {
	fake.validateCIDRMutex.Lock()
	ret, specificReturn := fake.validateCIDRReturnsOnCall[len(fake.validateCIDRArgsForCall)]
	fake.validateCIDRArgsForCall = append(fake.validateCIDRArgsForCall, struct {
		arg1 string
		arg2 map[string]string
	}{arg1, arg2})
	stub := fake.ValidateCIDRStub
	fakeReturns := fake.validateCIDRReturns
	fake.recordInvocation("ValidateCIDR", []interface{}{arg1, arg2})
	fake.validateCIDRMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNetworkValidator) ValidateCIDRCallCount() int {
	fake.validateCIDRMutex.RLock()
	defer fake.validateCIDRMutex.RUnlock()
	return len(fake.validateCIDRArgsForCall)
}

func (fake *FakeNetworkValidator) ValidateCIDRCalls(stub func(string, map[string]string) error) {
	fake.validateCIDRMutex.Lock()
	defer fake.validateCIDRMutex.Unlock()
	fake.ValidateCIDRStub = stub
}

func (fake *FakeNetworkValidator) ValidateCIDRArgsForCall(i int) (string, map[string]string) {
	fake.validateCIDRMutex.RLock()
	defer fake.validateCIDRMutex.RUnlock()
	argsForCall := fake.validateCIDRArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNetworkValidator) ValidateCIDRReturns(result1 error) {
	fake.validateCIDRMutex.Lock()
	defer fake.validateCIDRMutex.Unlock()
	fake.ValidateCIDRStub = nil
	fake.validateCIDRReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworkValidator) ValidateCIDRReturnsOnCall(i int, result1 error) {
	fake.validateCIDRMutex.Lock()
	defer fake.validateCIDRMutex.Unlock()
	fake.ValidateCIDRStub = nil
	if fake.validateCIDRReturnsOnCall == nil {
		fake.validateCIDRReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateCIDRReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworkValidator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNetworkValidator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ state.NetworkValidator = new(FakeNetworkValidator)
