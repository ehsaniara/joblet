// Code generated by counterfeiter. DO NOT EDIT.
package statefakes

import (
	"joblet/internal/joblet/network"
	"joblet/internal/joblet/state"
	"sync"
)

type FakeBandwidthLimiter struct {
	ApplyJobLimitsStub        func(string, network.NetworkLimits) error
	applyJobLimitsMutex       sync.RWMutex
	applyJobLimitsArgsForCall []struct {
		arg1 string
		arg2 network.NetworkLimits
	}
	applyJobLimitsReturns struct {
		result1 error
	}
	applyJobLimitsReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveJobLimitsStub        func(string) error
	removeJobLimitsMutex       sync.RWMutex
	removeJobLimitsArgsForCall []struct {
		arg1 string
	}
	removeJobLimitsReturns struct {
		result1 error
	}
	removeJobLimitsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBandwidthLimiter) ApplyJobLimits(arg1 string, arg2 network.NetworkLimits) error {
	fake.applyJobLimitsMutex.Lock()
	ret, specificReturn := fake.applyJobLimitsReturnsOnCall[len(fake.applyJobLimitsArgsForCall)]
	fake.applyJobLimitsArgsForCall = append(fake.applyJobLimitsArgsForCall, struct {
		arg1 string
		arg2 network.NetworkLimits
	}{arg1, arg2})
	stub := fake.ApplyJobLimitsStub
	fakeReturns := fake.applyJobLimitsReturns
	fake.recordInvocation("ApplyJobLimits", []interface{}{arg1, arg2})
	fake.applyJobLimitsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBandwidthLimiter) ApplyJobLimitsCallCount() int {
	fake.applyJobLimitsMutex.RLock()
	defer fake.applyJobLimitsMutex.RUnlock()
	return len(fake.applyJobLimitsArgsForCall)
}

func (fake *FakeBandwidthLimiter) ApplyJobLimitsCalls(stub func(string, network.NetworkLimits) error) {
	fake.applyJobLimitsMutex.Lock()
	defer fake.applyJobLimitsMutex.Unlock()
	fake.ApplyJobLimitsStub = stub
}

func (fake *FakeBandwidthLimiter) ApplyJobLimitsArgsForCall(i int) (string, network.NetworkLimits) {
	fake.applyJobLimitsMutex.RLock()
	defer fake.applyJobLimitsMutex.RUnlock()
	argsForCall := fake.applyJobLimitsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBandwidthLimiter) ApplyJobLimitsReturns(result1 error) {
	fake.applyJobLimitsMutex.Lock()
	defer fake.applyJobLimitsMutex.Unlock()
	fake.ApplyJobLimitsStub = nil
	fake.applyJobLimitsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBandwidthLimiter) ApplyJobLimitsReturnsOnCall(i int, result1 error) {
	fake.applyJobLimitsMutex.Lock()
	defer fake.applyJobLimitsMutex.Unlock()
	fake.ApplyJobLimitsStub = nil
	if fake.applyJobLimitsReturnsOnCall == nil {
		fake.applyJobLimitsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.applyJobLimitsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBandwidthLimiter) RemoveJobLimits(arg1 string) error {
	fake.removeJobLimitsMutex.Lock()
	ret, specificReturn := fake.removeJobLimitsReturnsOnCall[len(fake.removeJobLimitsArgsForCall)]
	fake.removeJobLimitsArgsForCall = append(fake.removeJobLimitsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.RemoveJobLimitsStub
	fakeReturns := fake.removeJobLimitsReturns
	fake.recordInvocation("RemoveJobLimits", []interface{}{arg1})
	fake.removeJobLimitsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBandwidthLimiter) RemoveJobLimitsCallCount() int {
	fake.removeJobLimitsMutex.RLock()
	defer fake.removeJobLimitsMutex.RUnlock()
	return len(fake.removeJobLimitsArgsForCall)
}

func (fake *FakeBandwidthLimiter) RemoveJobLimitsCalls(stub func(string) error) {
	fake.removeJobLimitsMutex.Lock()
	defer fake.removeJobLimitsMutex.Unlock()
	fake.RemoveJobLimitsStub = stub
}

func (fake *FakeBandwidthLimiter) RemoveJobLimitsArgsForCall(i int) string {
	fake.removeJobLimitsMutex.RLock()
	defer fake.removeJobLimitsMutex.RUnlock()
	argsForCall := fake.removeJobLimitsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBandwidthLimiter) RemoveJobLimitsReturns(result1 error) {
	fake.removeJobLimitsMutex.Lock()
	defer fake.removeJobLimitsMutex.Unlock()
	fake.RemoveJobLimitsStub = nil
	fake.removeJobLimitsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBandwidthLimiter) RemoveJobLimitsReturnsOnCall(i int, result1 error) {
	fake.removeJobLimitsMutex.Lock()
	defer fake.removeJobLimitsMutex.Unlock()
	fake.RemoveJobLimitsStub = nil
	if fake.removeJobLimitsReturnsOnCall == nil {
		fake.removeJobLimitsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeJobLimitsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBandwidthLimiter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBandwidthLimiter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ state.BandwidthLimiter = new(FakeBandwidthLimiter)
