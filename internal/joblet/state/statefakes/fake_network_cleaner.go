// Code generated by counterfeiter. DO NOT EDIT.
package statefakes

import (
	"joblet/internal/joblet/state"
	"sync"
	"time"
)

type FakeNetworkCleaner struct {
	CleanupOrphanedInterfacesStub        func() error
	cleanupOrphanedInterfacesMutex       sync.RWMutex
	cleanupOrphanedInterfacesArgsForCall []struct {
	}
	cleanupOrphanedInterfacesReturns struct {
		result1 error
	}
	cleanupOrphanedInterfacesReturnsOnCall map[int]struct {
		result1 error
	}
	StartPeriodicCleanupStub        func(time.Duration)
	startPeriodicCleanupMutex       sync.RWMutex
	startPeriodicCleanupArgsForCall []struct {
		arg1 time.Duration
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNetworkCleaner) CleanupOrphanedInterfaces() error {
	fake.cleanupOrphanedInterfacesMutex.Lock()
	ret, specificReturn := fake.cleanupOrphanedInterfacesReturnsOnCall[len(fake.cleanupOrphanedInterfacesArgsForCall)]
	fake.cleanupOrphanedInterfacesArgsForCall = append(fake.cleanupOrphanedInterfacesArgsForCall, struct {
	}{})
	stub := fake.CleanupOrphanedInterfacesStub
	fakeReturns := fake.cleanupOrphanedInterfacesReturns
	fake.recordInvocation("CleanupOrphanedInterfaces", []interface{}{})
	fake.cleanupOrphanedInterfacesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNetworkCleaner) CleanupOrphanedInterfacesCallCount() int {
	fake.cleanupOrphanedInterfacesMutex.RLock()
	defer fake.cleanupOrphanedInterfacesMutex.RUnlock()
	return len(fake.cleanupOrphanedInterfacesArgsForCall)
}

func (fake *FakeNetworkCleaner) CleanupOrphanedInterfacesCalls(stub func() error) {
	fake.cleanupOrphanedInterfacesMutex.Lock()
	defer fake.cleanupOrphanedInterfacesMutex.Unlock()
	fake.CleanupOrphanedInterfacesStub = stub
}

func (fake *FakeNetworkCleaner) CleanupOrphanedInterfacesReturns(result1 error) {
	fake.cleanupOrphanedInterfacesMutex.Lock()
	defer fake.cleanupOrphanedInterfacesMutex.Unlock()
	fake.CleanupOrphanedInterfacesStub = nil
	fake.cleanupOrphanedInterfacesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworkCleaner) CleanupOrphanedInterfacesReturnsOnCall(i int, result1 error) {
	fake.cleanupOrphanedInterfacesMutex.Lock()
	defer fake.cleanupOrphanedInterfacesMutex.Unlock()
	fake.CleanupOrphanedInterfacesStub = nil
	if fake.cleanupOrphanedInterfacesReturnsOnCall == nil {
		fake.cleanupOrphanedInterfacesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cleanupOrphanedInterfacesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworkCleaner) StartPeriodicCleanup(arg1 time.Duration) {
	fake.startPeriodicCleanupMutex.Lock()
	fake.startPeriodicCleanupArgsForCall = append(fake.startPeriodicCleanupArgsForCall, struct {
		arg1 time.Duration
	}{arg1})
	stub := fake.StartPeriodicCleanupStub
	fake.recordInvocation("StartPeriodicCleanup", []interface{}{arg1})
	fake.startPeriodicCleanupMutex.Unlock()
	if stub != nil {
		fake.StartPeriodicCleanupStub(arg1)
	}
}

func (fake *FakeNetworkCleaner) StartPeriodicCleanupCallCount() int {
	fake.startPeriodicCleanupMutex.RLock()
	defer fake.startPeriodicCleanupMutex.RUnlock()
	return len(fake.startPeriodicCleanupArgsForCall)
}

func (fake *FakeNetworkCleaner) StartPeriodicCleanupCalls(stub func(time.Duration)) {
	fake.startPeriodicCleanupMutex.Lock()
	defer fake.startPeriodicCleanupMutex.Unlock()
	fake.StartPeriodicCleanupStub = stub
}

func (fake *FakeNetworkCleaner) StartPeriodicCleanupArgsForCall(i int) time.Duration {
	fake.startPeriodicCleanupMutex.RLock()
	defer fake.startPeriodicCleanupMutex.RUnlock()
	argsForCall := fake.startPeriodicCleanupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNetworkCleaner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNetworkCleaner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ state.NetworkCleaner = new(FakeNetworkCleaner)
