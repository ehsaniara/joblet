// Code generated by counterfeiter. DO NOT EDIT.
package statefakes

import (
	"joblet/internal/joblet/state"
	"sync"
)

type FakeBridgeManager struct {
	RemoveBridgeStub        func(string) error
	removeBridgeMutex       sync.RWMutex
	removeBridgeArgsForCall []struct {
		arg1 string
	}
	removeBridgeReturns struct {
		result1 error
	}
	removeBridgeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBridgeManager) RemoveBridge(arg1 string) error {
	fake.removeBridgeMutex.Lock()
	ret, specificReturn := fake.removeBridgeReturnsOnCall[len(fake.removeBridgeArgsForCall)]
	fake.removeBridgeArgsForCall = append(fake.removeBridgeArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.RemoveBridgeStub
	fakeReturns := fake.removeBridgeReturns
	fake.recordInvocation("RemoveBridge", []interface{}{arg1})
	fake.removeBridgeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBridgeManager) RemoveBridgeCallCount() int {
	fake.removeBridgeMutex.RLock()
	defer fake.removeBridgeMutex.RUnlock()
	return len(fake.removeBridgeArgsForCall)
}

func (fake *FakeBridgeManager) RemoveBridgeCalls(stub func(string) error) {
	fake.removeBridgeMutex.Lock()
	defer fake.removeBridgeMutex.Unlock()
	fake.RemoveBridgeStub = stub
}

func (fake *FakeBridgeManager) RemoveBridgeArgsForCall(i int) string {
	fake.removeBridgeMutex.RLock()
	defer fake.removeBridgeMutex.RUnlock()
	argsForCall := fake.removeBridgeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBridgeManager) RemoveBridgeReturns(result1 error) {
	fake.removeBridgeMutex.Lock()
	defer fake.removeBridgeMutex.Unlock()
	fake.RemoveBridgeStub = nil
	fake.removeBridgeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBridgeManager) RemoveBridgeReturnsOnCall(i int, result1 error) {
	fake.removeBridgeMutex.Lock()
	defer fake.removeBridgeMutex.Unlock()
	fake.RemoveBridgeStub = nil
	if fake.removeBridgeReturnsOnCall == nil {
		fake.removeBridgeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeBridgeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBridgeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBridgeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ state.BridgeManager = new(FakeBridgeManager)
