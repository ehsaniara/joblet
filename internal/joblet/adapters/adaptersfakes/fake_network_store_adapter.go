// Code generated by counterfeiter. DO NOT EDIT.
package adaptersfakes

import (
	"joblet/internal/joblet/adapters"
	"sync"
)

type FakeNetworkStoreAdapter struct {
	AllocateIPStub        func(string) (string, error)
	allocateIPMutex       sync.RWMutex
	allocateIPArgsForCall []struct {
		arg1 string
	}
	allocateIPReturns struct {
		result1 string
		result2 error
	}
	allocateIPReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	AssignJobToNetworkStub        func(string, string, *adapters.JobNetworkAllocation) error
	assignJobToNetworkMutex       sync.RWMutex
	assignJobToNetworkArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 *adapters.JobNetworkAllocation
	}
	assignJobToNetworkReturns struct {
		result1 error
	}
	assignJobToNetworkReturnsOnCall map[int]struct {
		result1 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	CreateNetworkStub        func(*adapters.NetworkConfig) error
	createNetworkMutex       sync.RWMutex
	createNetworkArgsForCall []struct {
		arg1 *adapters.NetworkConfig
	}
	createNetworkReturns struct {
		result1 error
	}
	createNetworkReturnsOnCall map[int]struct {
		result1 error
	}
	GetJobNetworkAllocationStub        func(string) (*adapters.JobNetworkAllocation, bool)
	getJobNetworkAllocationMutex       sync.RWMutex
	getJobNetworkAllocationArgsForCall []struct {
		arg1 string
	}
	getJobNetworkAllocationReturns struct {
		result1 *adapters.JobNetworkAllocation
		result2 bool
	}
	getJobNetworkAllocationReturnsOnCall map[int]struct {
		result1 *adapters.JobNetworkAllocation
		result2 bool
	}
	GetNetworkStub        func(string) (*adapters.NetworkConfig, bool)
	getNetworkMutex       sync.RWMutex
	getNetworkArgsForCall []struct {
		arg1 string
	}
	getNetworkReturns struct {
		result1 *adapters.NetworkConfig
		result2 bool
	}
	getNetworkReturnsOnCall map[int]struct {
		result1 *adapters.NetworkConfig
		result2 bool
	}
	ListJobsInNetworkStub        func(string) []*adapters.JobNetworkAllocation
	listJobsInNetworkMutex       sync.RWMutex
	listJobsInNetworkArgsForCall []struct {
		arg1 string
	}
	listJobsInNetworkReturns struct {
		result1 []*adapters.JobNetworkAllocation
	}
	listJobsInNetworkReturnsOnCall map[int]struct {
		result1 []*adapters.JobNetworkAllocation
	}
	ListNetworksStub        func() []*adapters.NetworkConfig
	listNetworksMutex       sync.RWMutex
	listNetworksArgsForCall []struct {
	}
	listNetworksReturns struct {
		result1 []*adapters.NetworkConfig
	}
	listNetworksReturnsOnCall map[int]struct {
		result1 []*adapters.NetworkConfig
	}
	ReleaseIPStub        func(string, string) error
	releaseIPMutex       sync.RWMutex
	releaseIPArgsForCall []struct {
		arg1 string
		arg2 string
	}
	releaseIPReturns struct {
		result1 error
	}
	releaseIPReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveJobFromNetworkStub        func(string) error
	removeJobFromNetworkMutex       sync.RWMutex
	removeJobFromNetworkArgsForCall []struct {
		arg1 string
	}
	removeJobFromNetworkReturns struct {
		result1 error
	}
	removeJobFromNetworkReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveNetworkStub        func(string) error
	removeNetworkMutex       sync.RWMutex
	removeNetworkArgsForCall []struct {
		arg1 string
	}
	removeNetworkReturns struct {
		result1 error
	}
	removeNetworkReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNetworkStoreAdapter) AllocateIP(arg1 string) (string, error) {
	fake.allocateIPMutex.Lock()
	ret, specificReturn := fake.allocateIPReturnsOnCall[len(fake.allocateIPArgsForCall)]
	fake.allocateIPArgsForCall = append(fake.allocateIPArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.AllocateIPStub
	fakeReturns := fake.allocateIPReturns
	fake.recordInvocation("AllocateIP", []interface{}{arg1})
	fake.allocateIPMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNetworkStoreAdapter) AllocateIPCallCount() int {
	fake.allocateIPMutex.RLock()
	defer fake.allocateIPMutex.RUnlock()
	return len(fake.allocateIPArgsForCall)
}

func (fake *FakeNetworkStoreAdapter) AllocateIPCalls(stub func(string) (string, error)) {
	fake.allocateIPMutex.Lock()
	defer fake.allocateIPMutex.Unlock()
	fake.AllocateIPStub = stub
}

func (fake *FakeNetworkStoreAdapter) AllocateIPArgsForCall(i int) string {
	fake.allocateIPMutex.RLock()
	defer fake.allocateIPMutex.RUnlock()
	argsForCall := fake.allocateIPArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNetworkStoreAdapter) AllocateIPReturns(result1 string, result2 error) {
	fake.allocateIPMutex.Lock()
	defer fake.allocateIPMutex.Unlock()
	fake.AllocateIPStub = nil
	fake.allocateIPReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeNetworkStoreAdapter) AllocateIPReturnsOnCall(i int, result1 string, result2 error) {
	fake.allocateIPMutex.Lock()
	defer fake.allocateIPMutex.Unlock()
	fake.AllocateIPStub = nil
	if fake.allocateIPReturnsOnCall == nil {
		fake.allocateIPReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.allocateIPReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeNetworkStoreAdapter) AssignJobToNetwork(arg1 string, arg2 string, arg3 *adapters.JobNetworkAllocation) error {
	fake.assignJobToNetworkMutex.Lock()
	ret, specificReturn := fake.assignJobToNetworkReturnsOnCall[len(fake.assignJobToNetworkArgsForCall)]
	fake.assignJobToNetworkArgsForCall = append(fake.assignJobToNetworkArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 *adapters.JobNetworkAllocation
	}{arg1, arg2, arg3})
	stub := fake.AssignJobToNetworkStub
	fakeReturns := fake.assignJobToNetworkReturns
	fake.recordInvocation("AssignJobToNetwork", []interface{}{arg1, arg2, arg3})
	fake.assignJobToNetworkMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNetworkStoreAdapter) AssignJobToNetworkCallCount() int {
	fake.assignJobToNetworkMutex.RLock()
	defer fake.assignJobToNetworkMutex.RUnlock()
	return len(fake.assignJobToNetworkArgsForCall)
}

func (fake *FakeNetworkStoreAdapter) AssignJobToNetworkCalls(stub func(string, string, *adapters.JobNetworkAllocation) error) {
	fake.assignJobToNetworkMutex.Lock()
	defer fake.assignJobToNetworkMutex.Unlock()
	fake.AssignJobToNetworkStub = stub
}

func (fake *FakeNetworkStoreAdapter) AssignJobToNetworkArgsForCall(i int) (string, string, *adapters.JobNetworkAllocation) {
	fake.assignJobToNetworkMutex.RLock()
	defer fake.assignJobToNetworkMutex.RUnlock()
	argsForCall := fake.assignJobToNetworkArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNetworkStoreAdapter) AssignJobToNetworkReturns(result1 error) {
	fake.assignJobToNetworkMutex.Lock()
	defer fake.assignJobToNetworkMutex.Unlock()
	fake.AssignJobToNetworkStub = nil
	fake.assignJobToNetworkReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworkStoreAdapter) AssignJobToNetworkReturnsOnCall(i int, result1 error) {
	fake.assignJobToNetworkMutex.Lock()
	defer fake.assignJobToNetworkMutex.Unlock()
	fake.AssignJobToNetworkStub = nil
	if fake.assignJobToNetworkReturnsOnCall == nil {
		fake.assignJobToNetworkReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.assignJobToNetworkReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworkStoreAdapter) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNetworkStoreAdapter) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeNetworkStoreAdapter) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeNetworkStoreAdapter) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworkStoreAdapter) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworkStoreAdapter) CreateNetwork(arg1 *adapters.NetworkConfig) error {
	fake.createNetworkMutex.Lock()
	ret, specificReturn := fake.createNetworkReturnsOnCall[len(fake.createNetworkArgsForCall)]
	fake.createNetworkArgsForCall = append(fake.createNetworkArgsForCall, struct {
		arg1 *adapters.NetworkConfig
	}{arg1})
	stub := fake.CreateNetworkStub
	fakeReturns := fake.createNetworkReturns
	fake.recordInvocation("CreateNetwork", []interface{}{arg1})
	fake.createNetworkMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNetworkStoreAdapter) CreateNetworkCallCount() int {
	fake.createNetworkMutex.RLock()
	defer fake.createNetworkMutex.RUnlock()
	return len(fake.createNetworkArgsForCall)
}

func (fake *FakeNetworkStoreAdapter) CreateNetworkCalls(stub func(*adapters.NetworkConfig) error) {
	fake.createNetworkMutex.Lock()
	defer fake.createNetworkMutex.Unlock()
	fake.CreateNetworkStub = stub
}

func (fake *FakeNetworkStoreAdapter) CreateNetworkArgsForCall(i int) *adapters.NetworkConfig {
	fake.createNetworkMutex.RLock()
	defer fake.createNetworkMutex.RUnlock()
	argsForCall := fake.createNetworkArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNetworkStoreAdapter) CreateNetworkReturns(result1 error) {
	fake.createNetworkMutex.Lock()
	defer fake.createNetworkMutex.Unlock()
	fake.CreateNetworkStub = nil
	fake.createNetworkReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworkStoreAdapter) CreateNetworkReturnsOnCall(i int, result1 error) {
	fake.createNetworkMutex.Lock()
	defer fake.createNetworkMutex.Unlock()
	fake.CreateNetworkStub = nil
	if fake.createNetworkReturnsOnCall == nil {
		fake.createNetworkReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createNetworkReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworkStoreAdapter) GetJobNetworkAllocation(arg1 string) (*adapters.JobNetworkAllocation, bool) {
	fake.getJobNetworkAllocationMutex.Lock()
	ret, specificReturn := fake.getJobNetworkAllocationReturnsOnCall[len(fake.getJobNetworkAllocationArgsForCall)]
	fake.getJobNetworkAllocationArgsForCall = append(fake.getJobNetworkAllocationArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetJobNetworkAllocationStub
	fakeReturns := fake.getJobNetworkAllocationReturns
	fake.recordInvocation("GetJobNetworkAllocation", []interface{}{arg1})
	fake.getJobNetworkAllocationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNetworkStoreAdapter) GetJobNetworkAllocationCallCount() int {
	fake.getJobNetworkAllocationMutex.RLock()
	defer fake.getJobNetworkAllocationMutex.RUnlock()
	return len(fake.getJobNetworkAllocationArgsForCall)
}

func (fake *FakeNetworkStoreAdapter) GetJobNetworkAllocationCalls(stub func(string) (*adapters.JobNetworkAllocation, bool)) {
	fake.getJobNetworkAllocationMutex.Lock()
	defer fake.getJobNetworkAllocationMutex.Unlock()
	fake.GetJobNetworkAllocationStub = stub
}

func (fake *FakeNetworkStoreAdapter) GetJobNetworkAllocationArgsForCall(i int) string {
	fake.getJobNetworkAllocationMutex.RLock()
	defer fake.getJobNetworkAllocationMutex.RUnlock()
	argsForCall := fake.getJobNetworkAllocationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNetworkStoreAdapter) GetJobNetworkAllocationReturns(result1 *adapters.JobNetworkAllocation, result2 bool) {
	fake.getJobNetworkAllocationMutex.Lock()
	defer fake.getJobNetworkAllocationMutex.Unlock()
	fake.GetJobNetworkAllocationStub = nil
	fake.getJobNetworkAllocationReturns = struct {
		result1 *adapters.JobNetworkAllocation
		result2 bool
	}{result1, result2}
}

func (fake *FakeNetworkStoreAdapter) GetJobNetworkAllocationReturnsOnCall(i int, result1 *adapters.JobNetworkAllocation, result2 bool) {
	fake.getJobNetworkAllocationMutex.Lock()
	defer fake.getJobNetworkAllocationMutex.Unlock()
	fake.GetJobNetworkAllocationStub = nil
	if fake.getJobNetworkAllocationReturnsOnCall == nil {
		fake.getJobNetworkAllocationReturnsOnCall = make(map[int]struct {
			result1 *adapters.JobNetworkAllocation
			result2 bool
		})
	}
	fake.getJobNetworkAllocationReturnsOnCall[i] = struct {
		result1 *adapters.JobNetworkAllocation
		result2 bool
	}{result1, result2}
}

func (fake *FakeNetworkStoreAdapter) GetNetwork(arg1 string) (*adapters.NetworkConfig, bool) {
	fake.getNetworkMutex.Lock()
	ret, specificReturn := fake.getNetworkReturnsOnCall[len(fake.getNetworkArgsForCall)]
	fake.getNetworkArgsForCall = append(fake.getNetworkArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetNetworkStub
	fakeReturns := fake.getNetworkReturns
	fake.recordInvocation("GetNetwork", []interface{}{arg1})
	fake.getNetworkMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNetworkStoreAdapter) GetNetworkCallCount() int {
	fake.getNetworkMutex.RLock()
	defer fake.getNetworkMutex.RUnlock()
	return len(fake.getNetworkArgsForCall)
}

func (fake *FakeNetworkStoreAdapter) GetNetworkCalls(stub func(string) (*adapters.NetworkConfig, bool)) {
	fake.getNetworkMutex.Lock()
	defer fake.getNetworkMutex.Unlock()
	fake.GetNetworkStub = stub
}

func (fake *FakeNetworkStoreAdapter) GetNetworkArgsForCall(i int) string {
	fake.getNetworkMutex.RLock()
	defer fake.getNetworkMutex.RUnlock()
	argsForCall := fake.getNetworkArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNetworkStoreAdapter) GetNetworkReturns(result1 *adapters.NetworkConfig, result2 bool) {
	fake.getNetworkMutex.Lock()
	defer fake.getNetworkMutex.Unlock()
	fake.GetNetworkStub = nil
	fake.getNetworkReturns = struct {
		result1 *adapters.NetworkConfig
		result2 bool
	}{result1, result2}
}

func (fake *FakeNetworkStoreAdapter) GetNetworkReturnsOnCall(i int, result1 *adapters.NetworkConfig, result2 bool) {
	fake.getNetworkMutex.Lock()
	defer fake.getNetworkMutex.Unlock()
	fake.GetNetworkStub = nil
	if fake.getNetworkReturnsOnCall == nil {
		fake.getNetworkReturnsOnCall = make(map[int]struct {
			result1 *adapters.NetworkConfig
			result2 bool
		})
	}
	fake.getNetworkReturnsOnCall[i] = struct {
		result1 *adapters.NetworkConfig
		result2 bool
	}{result1, result2}
}

func (fake *FakeNetworkStoreAdapter) ListJobsInNetwork(arg1 string) []*adapters.JobNetworkAllocation {
	fake.listJobsInNetworkMutex.Lock()
	ret, specificReturn := fake.listJobsInNetworkReturnsOnCall[len(fake.listJobsInNetworkArgsForCall)]
	fake.listJobsInNetworkArgsForCall = append(fake.listJobsInNetworkArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ListJobsInNetworkStub
	fakeReturns := fake.listJobsInNetworkReturns
	fake.recordInvocation("ListJobsInNetwork", []interface{}{arg1})
	fake.listJobsInNetworkMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNetworkStoreAdapter) ListJobsInNetworkCallCount() int {
	fake.listJobsInNetworkMutex.RLock()
	defer fake.listJobsInNetworkMutex.RUnlock()
	return len(fake.listJobsInNetworkArgsForCall)
}

func (fake *FakeNetworkStoreAdapter) ListJobsInNetworkCalls(stub func(string) []*adapters.JobNetworkAllocation) {
	fake.listJobsInNetworkMutex.Lock()
	defer fake.listJobsInNetworkMutex.Unlock()
	fake.ListJobsInNetworkStub = stub
}

func (fake *FakeNetworkStoreAdapter) ListJobsInNetworkArgsForCall(i int) string {
	fake.listJobsInNetworkMutex.RLock()
	defer fake.listJobsInNetworkMutex.RUnlock()
	argsForCall := fake.listJobsInNetworkArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNetworkStoreAdapter) ListJobsInNetworkReturns(result1 []*adapters.JobNetworkAllocation) {
	fake.listJobsInNetworkMutex.Lock()
	defer fake.listJobsInNetworkMutex.Unlock()
	fake.ListJobsInNetworkStub = nil
	fake.listJobsInNetworkReturns = struct {
		result1 []*adapters.JobNetworkAllocation
	}{result1}
}

func (fake *FakeNetworkStoreAdapter) ListJobsInNetworkReturnsOnCall(i int, result1 []*adapters.JobNetworkAllocation) {
	fake.listJobsInNetworkMutex.Lock()
	defer fake.listJobsInNetworkMutex.Unlock()
	fake.ListJobsInNetworkStub = nil
	if fake.listJobsInNetworkReturnsOnCall == nil {
		fake.listJobsInNetworkReturnsOnCall = make(map[int]struct {
			result1 []*adapters.JobNetworkAllocation
		})
	}
	fake.listJobsInNetworkReturnsOnCall[i] = struct {
		result1 []*adapters.JobNetworkAllocation
	}{result1}
}

func (fake *FakeNetworkStoreAdapter) ListNetworks() []*adapters.NetworkConfig {
	fake.listNetworksMutex.Lock()
	ret, specificReturn := fake.listNetworksReturnsOnCall[len(fake.listNetworksArgsForCall)]
	fake.listNetworksArgsForCall = append(fake.listNetworksArgsForCall, struct {
	}{})
	stub := fake.ListNetworksStub
	fakeReturns := fake.listNetworksReturns
	fake.recordInvocation("ListNetworks", []interface{}{})
	fake.listNetworksMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNetworkStoreAdapter) ListNetworksCallCount() int {
	fake.listNetworksMutex.RLock()
	defer fake.listNetworksMutex.RUnlock()
	return len(fake.listNetworksArgsForCall)
}

func (fake *FakeNetworkStoreAdapter) ListNetworksCalls(stub func() []*adapters.NetworkConfig) {
	fake.listNetworksMutex.Lock()
	defer fake.listNetworksMutex.Unlock()
	fake.ListNetworksStub = stub
}

func (fake *FakeNetworkStoreAdapter) ListNetworksReturns(result1 []*adapters.NetworkConfig) {
	fake.listNetworksMutex.Lock()
	defer fake.listNetworksMutex.Unlock()
	fake.ListNetworksStub = nil
	fake.listNetworksReturns = struct {
		result1 []*adapters.NetworkConfig
	}{result1}
}

func (fake *FakeNetworkStoreAdapter) ListNetworksReturnsOnCall(i int, result1 []*adapters.NetworkConfig) {
	fake.listNetworksMutex.Lock()
	defer fake.listNetworksMutex.Unlock()
	fake.ListNetworksStub = nil
	if fake.listNetworksReturnsOnCall == nil {
		fake.listNetworksReturnsOnCall = make(map[int]struct {
			result1 []*adapters.NetworkConfig
		})
	}
	fake.listNetworksReturnsOnCall[i] = struct {
		result1 []*adapters.NetworkConfig
	}{result1}
}

func (fake *FakeNetworkStoreAdapter) ReleaseIP(arg1 string, arg2 string) error {
	fake.releaseIPMutex.Lock()
	ret, specificReturn := fake.releaseIPReturnsOnCall[len(fake.releaseIPArgsForCall)]
	fake.releaseIPArgsForCall = append(fake.releaseIPArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.ReleaseIPStub
	fakeReturns := fake.releaseIPReturns
	fake.recordInvocation("ReleaseIP", []interface{}{arg1, arg2})
	fake.releaseIPMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNetworkStoreAdapter) ReleaseIPCallCount() int {
	fake.releaseIPMutex.RLock()
	defer fake.releaseIPMutex.RUnlock()
	return len(fake.releaseIPArgsForCall)
}

func (fake *FakeNetworkStoreAdapter) ReleaseIPCalls(stub func(string, string) error) {
	fake.releaseIPMutex.Lock()
	defer fake.releaseIPMutex.Unlock()
	fake.ReleaseIPStub = stub
}

func (fake *FakeNetworkStoreAdapter) ReleaseIPArgsForCall(i int) (string, string) {
	fake.releaseIPMutex.RLock()
	defer fake.releaseIPMutex.RUnlock()
	argsForCall := fake.releaseIPArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNetworkStoreAdapter) ReleaseIPReturns(result1 error) {
	fake.releaseIPMutex.Lock()
	defer fake.releaseIPMutex.Unlock()
	fake.ReleaseIPStub = nil
	fake.releaseIPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworkStoreAdapter) ReleaseIPReturnsOnCall(i int, result1 error) {
	fake.releaseIPMutex.Lock()
	defer fake.releaseIPMutex.Unlock()
	fake.ReleaseIPStub = nil
	if fake.releaseIPReturnsOnCall == nil {
		fake.releaseIPReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.releaseIPReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworkStoreAdapter) RemoveJobFromNetwork(arg1 string) error {
	fake.removeJobFromNetworkMutex.Lock()
	ret, specificReturn := fake.removeJobFromNetworkReturnsOnCall[len(fake.removeJobFromNetworkArgsForCall)]
	fake.removeJobFromNetworkArgsForCall = append(fake.removeJobFromNetworkArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.RemoveJobFromNetworkStub
	fakeReturns := fake.removeJobFromNetworkReturns
	fake.recordInvocation("RemoveJobFromNetwork", []interface{}{arg1})
	fake.removeJobFromNetworkMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNetworkStoreAdapter) RemoveJobFromNetworkCallCount() int {
	fake.removeJobFromNetworkMutex.RLock()
	defer fake.removeJobFromNetworkMutex.RUnlock()
	return len(fake.removeJobFromNetworkArgsForCall)
}

func (fake *FakeNetworkStoreAdapter) RemoveJobFromNetworkCalls(stub func(string) error) {
	fake.removeJobFromNetworkMutex.Lock()
	defer fake.removeJobFromNetworkMutex.Unlock()
	fake.RemoveJobFromNetworkStub = stub
}

func (fake *FakeNetworkStoreAdapter) RemoveJobFromNetworkArgsForCall(i int) string {
	fake.removeJobFromNetworkMutex.RLock()
	defer fake.removeJobFromNetworkMutex.RUnlock()
	argsForCall := fake.removeJobFromNetworkArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNetworkStoreAdapter) RemoveJobFromNetworkReturns(result1 error) {
	fake.removeJobFromNetworkMutex.Lock()
	defer fake.removeJobFromNetworkMutex.Unlock()
	fake.RemoveJobFromNetworkStub = nil
	fake.removeJobFromNetworkReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworkStoreAdapter) RemoveJobFromNetworkReturnsOnCall(i int, result1 error) {
	fake.removeJobFromNetworkMutex.Lock()
	defer fake.removeJobFromNetworkMutex.Unlock()
	fake.RemoveJobFromNetworkStub = nil
	if fake.removeJobFromNetworkReturnsOnCall == nil {
		fake.removeJobFromNetworkReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeJobFromNetworkReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworkStoreAdapter) RemoveNetwork(arg1 string) error {
	fake.removeNetworkMutex.Lock()
	ret, specificReturn := fake.removeNetworkReturnsOnCall[len(fake.removeNetworkArgsForCall)]
	fake.removeNetworkArgsForCall = append(fake.removeNetworkArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.RemoveNetworkStub
	fakeReturns := fake.removeNetworkReturns
	fake.recordInvocation("RemoveNetwork", []interface{}{arg1})
	fake.removeNetworkMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNetworkStoreAdapter) RemoveNetworkCallCount() int {
	fake.removeNetworkMutex.RLock()
	defer fake.removeNetworkMutex.RUnlock()
	return len(fake.removeNetworkArgsForCall)
}

func (fake *FakeNetworkStoreAdapter) RemoveNetworkCalls(stub func(string) error) {
	fake.removeNetworkMutex.Lock()
	defer fake.removeNetworkMutex.Unlock()
	fake.RemoveNetworkStub = stub
}

func (fake *FakeNetworkStoreAdapter) RemoveNetworkArgsForCall(i int) string {
	fake.removeNetworkMutex.RLock()
	defer fake.removeNetworkMutex.RUnlock()
	argsForCall := fake.removeNetworkArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNetworkStoreAdapter) RemoveNetworkReturns(result1 error) {
	fake.removeNetworkMutex.Lock()
	defer fake.removeNetworkMutex.Unlock()
	fake.RemoveNetworkStub = nil
	fake.removeNetworkReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworkStoreAdapter) RemoveNetworkReturnsOnCall(i int, result1 error) {
	fake.removeNetworkMutex.Lock()
	defer fake.removeNetworkMutex.Unlock()
	fake.RemoveNetworkStub = nil
	if fake.removeNetworkReturnsOnCall == nil {
		fake.removeNetworkReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeNetworkReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNetworkStoreAdapter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNetworkStoreAdapter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ adapters.NetworkStoreAdapter = new(FakeNetworkStoreAdapter)
