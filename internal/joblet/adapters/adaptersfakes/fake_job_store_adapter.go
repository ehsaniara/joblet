// Code generated by counterfeiter. DO NOT EDIT.
package adaptersfakes

import (
	"context"
	"joblet/internal/joblet/adapters"
	"joblet/internal/joblet/domain"
	"sync"
)

type FakeJobStoreAdapter struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	CreateNewJobStub        func(*domain.Job)
	createNewJobMutex       sync.RWMutex
	createNewJobArgsForCall []struct {
		arg1 *domain.Job
	}
	GetJobStub        func(string) (*domain.Job, bool)
	getJobMutex       sync.RWMutex
	getJobArgsForCall []struct {
		arg1 string
	}
	getJobReturns struct {
		result1 *domain.Job
		result2 bool
	}
	getJobReturnsOnCall map[int]struct {
		result1 *domain.Job
		result2 bool
	}
	GetOutputStub        func(string) ([]byte, bool, error)
	getOutputMutex       sync.RWMutex
	getOutputArgsForCall []struct {
		arg1 string
	}
	getOutputReturns struct {
		result1 []byte
		result2 bool
		result3 error
	}
	getOutputReturnsOnCall map[int]struct {
		result1 []byte
		result2 bool
		result3 error
	}
	ListJobsStub        func() []*domain.Job
	listJobsMutex       sync.RWMutex
	listJobsArgsForCall []struct {
	}
	listJobsReturns struct {
		result1 []*domain.Job
	}
	listJobsReturnsOnCall map[int]struct {
		result1 []*domain.Job
	}
	SendUpdatesToClientStub        func(context.Context, string, adapters.DomainStreamer) error
	sendUpdatesToClientMutex       sync.RWMutex
	sendUpdatesToClientArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 adapters.DomainStreamer
	}
	sendUpdatesToClientReturns struct {
		result1 error
	}
	sendUpdatesToClientReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateJobStub        func(*domain.Job)
	updateJobMutex       sync.RWMutex
	updateJobArgsForCall []struct {
		arg1 *domain.Job
	}
	WriteToBufferStub        func(string, []byte)
	writeToBufferMutex       sync.RWMutex
	writeToBufferArgsForCall []struct {
		arg1 string
		arg2 []byte
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeJobStoreAdapter) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeJobStoreAdapter) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeJobStoreAdapter) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeJobStoreAdapter) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeJobStoreAdapter) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeJobStoreAdapter) CreateNewJob(arg1 *domain.Job) {
	fake.createNewJobMutex.Lock()
	fake.createNewJobArgsForCall = append(fake.createNewJobArgsForCall, struct {
		arg1 *domain.Job
	}{arg1})
	stub := fake.CreateNewJobStub
	fake.recordInvocation("CreateNewJob", []interface{}{arg1})
	fake.createNewJobMutex.Unlock()
	if stub != nil {
		fake.CreateNewJobStub(arg1)
	}
}

func (fake *FakeJobStoreAdapter) CreateNewJobCallCount() int {
	fake.createNewJobMutex.RLock()
	defer fake.createNewJobMutex.RUnlock()
	return len(fake.createNewJobArgsForCall)
}

func (fake *FakeJobStoreAdapter) CreateNewJobCalls(stub func(*domain.Job)) {
	fake.createNewJobMutex.Lock()
	defer fake.createNewJobMutex.Unlock()
	fake.CreateNewJobStub = stub
}

func (fake *FakeJobStoreAdapter) CreateNewJobArgsForCall(i int) *domain.Job {
	fake.createNewJobMutex.RLock()
	defer fake.createNewJobMutex.RUnlock()
	argsForCall := fake.createNewJobArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeJobStoreAdapter) GetJob(arg1 string) (*domain.Job, bool) {
	fake.getJobMutex.Lock()
	ret, specificReturn := fake.getJobReturnsOnCall[len(fake.getJobArgsForCall)]
	fake.getJobArgsForCall = append(fake.getJobArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetJobStub
	fakeReturns := fake.getJobReturns
	fake.recordInvocation("GetJob", []interface{}{arg1})
	fake.getJobMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeJobStoreAdapter) GetJobCallCount() int {
	fake.getJobMutex.RLock()
	defer fake.getJobMutex.RUnlock()
	return len(fake.getJobArgsForCall)
}

func (fake *FakeJobStoreAdapter) GetJobCalls(stub func(string) (*domain.Job, bool)) {
	fake.getJobMutex.Lock()
	defer fake.getJobMutex.Unlock()
	fake.GetJobStub = stub
}

func (fake *FakeJobStoreAdapter) GetJobArgsForCall(i int) string {
	fake.getJobMutex.RLock()
	defer fake.getJobMutex.RUnlock()
	argsForCall := fake.getJobArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeJobStoreAdapter) GetJobReturns(result1 *domain.Job, result2 bool) {
	fake.getJobMutex.Lock()
	defer fake.getJobMutex.Unlock()
	fake.GetJobStub = nil
	fake.getJobReturns = struct {
		result1 *domain.Job
		result2 bool
	}{result1, result2}
}

func (fake *FakeJobStoreAdapter) GetJobReturnsOnCall(i int, result1 *domain.Job, result2 bool) {
	fake.getJobMutex.Lock()
	defer fake.getJobMutex.Unlock()
	fake.GetJobStub = nil
	if fake.getJobReturnsOnCall == nil {
		fake.getJobReturnsOnCall = make(map[int]struct {
			result1 *domain.Job
			result2 bool
		})
	}
	fake.getJobReturnsOnCall[i] = struct {
		result1 *domain.Job
		result2 bool
	}{result1, result2}
}

func (fake *FakeJobStoreAdapter) GetOutput(arg1 string) ([]byte, bool, error) {
	fake.getOutputMutex.Lock()
	ret, specificReturn := fake.getOutputReturnsOnCall[len(fake.getOutputArgsForCall)]
	fake.getOutputArgsForCall = append(fake.getOutputArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetOutputStub
	fakeReturns := fake.getOutputReturns
	fake.recordInvocation("GetOutput", []interface{}{arg1})
	fake.getOutputMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeJobStoreAdapter) GetOutputCallCount() int {
	fake.getOutputMutex.RLock()
	defer fake.getOutputMutex.RUnlock()
	return len(fake.getOutputArgsForCall)
}

func (fake *FakeJobStoreAdapter) GetOutputCalls(stub func(string) ([]byte, bool, error)) {
	fake.getOutputMutex.Lock()
	defer fake.getOutputMutex.Unlock()
	fake.GetOutputStub = stub
}

func (fake *FakeJobStoreAdapter) GetOutputArgsForCall(i int) string {
	fake.getOutputMutex.RLock()
	defer fake.getOutputMutex.RUnlock()
	argsForCall := fake.getOutputArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeJobStoreAdapter) GetOutputReturns(result1 []byte, result2 bool, result3 error) {
	fake.getOutputMutex.Lock()
	defer fake.getOutputMutex.Unlock()
	fake.GetOutputStub = nil
	fake.getOutputReturns = struct {
		result1 []byte
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeJobStoreAdapter) GetOutputReturnsOnCall(i int, result1 []byte, result2 bool, result3 error) {
	fake.getOutputMutex.Lock()
	defer fake.getOutputMutex.Unlock()
	fake.GetOutputStub = nil
	if fake.getOutputReturnsOnCall == nil {
		fake.getOutputReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 bool
			result3 error
		})
	}
	fake.getOutputReturnsOnCall[i] = struct {
		result1 []byte
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeJobStoreAdapter) ListJobs() []*domain.Job {
	fake.listJobsMutex.Lock()
	ret, specificReturn := fake.listJobsReturnsOnCall[len(fake.listJobsArgsForCall)]
	fake.listJobsArgsForCall = append(fake.listJobsArgsForCall, struct {
	}{})
	stub := fake.ListJobsStub
	fakeReturns := fake.listJobsReturns
	fake.recordInvocation("ListJobs", []interface{}{})
	fake.listJobsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeJobStoreAdapter) ListJobsCallCount() int {
	fake.listJobsMutex.RLock()
	defer fake.listJobsMutex.RUnlock()
	return len(fake.listJobsArgsForCall)
}

func (fake *FakeJobStoreAdapter) ListJobsCalls(stub func() []*domain.Job) {
	fake.listJobsMutex.Lock()
	defer fake.listJobsMutex.Unlock()
	fake.ListJobsStub = stub
}

func (fake *FakeJobStoreAdapter) ListJobsReturns(result1 []*domain.Job) {
	fake.listJobsMutex.Lock()
	defer fake.listJobsMutex.Unlock()
	fake.ListJobsStub = nil
	fake.listJobsReturns = struct {
		result1 []*domain.Job
	}{result1}
}

func (fake *FakeJobStoreAdapter) ListJobsReturnsOnCall(i int, result1 []*domain.Job) {
	fake.listJobsMutex.Lock()
	defer fake.listJobsMutex.Unlock()
	fake.ListJobsStub = nil
	if fake.listJobsReturnsOnCall == nil {
		fake.listJobsReturnsOnCall = make(map[int]struct {
			result1 []*domain.Job
		})
	}
	fake.listJobsReturnsOnCall[i] = struct {
		result1 []*domain.Job
	}{result1}
}

func (fake *FakeJobStoreAdapter) SendUpdatesToClient(arg1 context.Context, arg2 string, arg3 adapters.DomainStreamer) error {
	fake.sendUpdatesToClientMutex.Lock()
	ret, specificReturn := fake.sendUpdatesToClientReturnsOnCall[len(fake.sendUpdatesToClientArgsForCall)]
	fake.sendUpdatesToClientArgsForCall = append(fake.sendUpdatesToClientArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 adapters.DomainStreamer
	}{arg1, arg2, arg3})
	stub := fake.SendUpdatesToClientStub
	fakeReturns := fake.sendUpdatesToClientReturns
	fake.recordInvocation("SendUpdatesToClient", []interface{}{arg1, arg2, arg3})
	fake.sendUpdatesToClientMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeJobStoreAdapter) SendUpdatesToClientCallCount() int {
	fake.sendUpdatesToClientMutex.RLock()
	defer fake.sendUpdatesToClientMutex.RUnlock()
	return len(fake.sendUpdatesToClientArgsForCall)
}

func (fake *FakeJobStoreAdapter) SendUpdatesToClientCalls(stub func(context.Context, string, adapters.DomainStreamer) error) {
	fake.sendUpdatesToClientMutex.Lock()
	defer fake.sendUpdatesToClientMutex.Unlock()
	fake.SendUpdatesToClientStub = stub
}

func (fake *FakeJobStoreAdapter) SendUpdatesToClientArgsForCall(i int) (context.Context, string, adapters.DomainStreamer) {
	fake.sendUpdatesToClientMutex.RLock()
	defer fake.sendUpdatesToClientMutex.RUnlock()
	argsForCall := fake.sendUpdatesToClientArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeJobStoreAdapter) SendUpdatesToClientReturns(result1 error) {
	fake.sendUpdatesToClientMutex.Lock()
	defer fake.sendUpdatesToClientMutex.Unlock()
	fake.SendUpdatesToClientStub = nil
	fake.sendUpdatesToClientReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeJobStoreAdapter) SendUpdatesToClientReturnsOnCall(i int, result1 error) {
	fake.sendUpdatesToClientMutex.Lock()
	defer fake.sendUpdatesToClientMutex.Unlock()
	fake.SendUpdatesToClientStub = nil
	if fake.sendUpdatesToClientReturnsOnCall == nil {
		fake.sendUpdatesToClientReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendUpdatesToClientReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeJobStoreAdapter) UpdateJob(arg1 *domain.Job) {
	fake.updateJobMutex.Lock()
	fake.updateJobArgsForCall = append(fake.updateJobArgsForCall, struct {
		arg1 *domain.Job
	}{arg1})
	stub := fake.UpdateJobStub
	fake.recordInvocation("UpdateJob", []interface{}{arg1})
	fake.updateJobMutex.Unlock()
	if stub != nil {
		fake.UpdateJobStub(arg1)
	}
}

func (fake *FakeJobStoreAdapter) UpdateJobCallCount() int {
	fake.updateJobMutex.RLock()
	defer fake.updateJobMutex.RUnlock()
	return len(fake.updateJobArgsForCall)
}

func (fake *FakeJobStoreAdapter) UpdateJobCalls(stub func(*domain.Job)) {
	fake.updateJobMutex.Lock()
	defer fake.updateJobMutex.Unlock()
	fake.UpdateJobStub = stub
}

func (fake *FakeJobStoreAdapter) UpdateJobArgsForCall(i int) *domain.Job {
	fake.updateJobMutex.RLock()
	defer fake.updateJobMutex.RUnlock()
	argsForCall := fake.updateJobArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeJobStoreAdapter) WriteToBuffer(arg1 string, arg2 []byte) {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.writeToBufferMutex.Lock()
	fake.writeToBufferArgsForCall = append(fake.writeToBufferArgsForCall, struct {
		arg1 string
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.WriteToBufferStub
	fake.recordInvocation("WriteToBuffer", []interface{}{arg1, arg2Copy})
	fake.writeToBufferMutex.Unlock()
	if stub != nil {
		fake.WriteToBufferStub(arg1, arg2)
	}
}

func (fake *FakeJobStoreAdapter) WriteToBufferCallCount() int {
	fake.writeToBufferMutex.RLock()
	defer fake.writeToBufferMutex.RUnlock()
	return len(fake.writeToBufferArgsForCall)
}

func (fake *FakeJobStoreAdapter) WriteToBufferCalls(stub func(string, []byte)) {
	fake.writeToBufferMutex.Lock()
	defer fake.writeToBufferMutex.Unlock()
	fake.WriteToBufferStub = stub
}

func (fake *FakeJobStoreAdapter) WriteToBufferArgsForCall(i int) (string, []byte) {
	fake.writeToBufferMutex.RLock()
	defer fake.writeToBufferMutex.RUnlock()
	argsForCall := fake.writeToBufferArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeJobStoreAdapter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeJobStoreAdapter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ adapters.JobStoreAdapter = new(FakeJobStoreAdapter)
