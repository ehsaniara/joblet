// Code generated by counterfeiter. DO NOT EDIT.
package platformfakes

import (
	"joblet/pkg/platform"
	"sync"
)

type FakeCommandFactory struct {
	CreateCommandStub        func(string, ...string) *platform.ExecCommand
	createCommandMutex       sync.RWMutex
	createCommandArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	createCommandReturns struct {
		result1 *platform.ExecCommand
	}
	createCommandReturnsOnCall map[int]struct {
		result1 *platform.ExecCommand
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCommandFactory) CreateCommand(arg1 string, arg2 ...string) *platform.ExecCommand {
	fake.createCommandMutex.Lock()
	ret, specificReturn := fake.createCommandReturnsOnCall[len(fake.createCommandArgsForCall)]
	fake.createCommandArgsForCall = append(fake.createCommandArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2})
	stub := fake.CreateCommandStub
	fakeReturns := fake.createCommandReturns
	fake.recordInvocation("CreateCommand", []interface{}{arg1, arg2})
	fake.createCommandMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCommandFactory) CreateCommandCallCount() int {
	fake.createCommandMutex.RLock()
	defer fake.createCommandMutex.RUnlock()
	return len(fake.createCommandArgsForCall)
}

func (fake *FakeCommandFactory) CreateCommandCalls(stub func(string, ...string) *platform.ExecCommand) {
	fake.createCommandMutex.Lock()
	defer fake.createCommandMutex.Unlock()
	fake.CreateCommandStub = stub
}

func (fake *FakeCommandFactory) CreateCommandArgsForCall(i int) (string, []string) {
	fake.createCommandMutex.RLock()
	defer fake.createCommandMutex.RUnlock()
	argsForCall := fake.createCommandArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCommandFactory) CreateCommandReturns(result1 *platform.ExecCommand) {
	fake.createCommandMutex.Lock()
	defer fake.createCommandMutex.Unlock()
	fake.CreateCommandStub = nil
	fake.createCommandReturns = struct {
		result1 *platform.ExecCommand
	}{result1}
}

func (fake *FakeCommandFactory) CreateCommandReturnsOnCall(i int, result1 *platform.ExecCommand) {
	fake.createCommandMutex.Lock()
	defer fake.createCommandMutex.Unlock()
	fake.CreateCommandStub = nil
	if fake.createCommandReturnsOnCall == nil {
		fake.createCommandReturnsOnCall = make(map[int]struct {
			result1 *platform.ExecCommand
		})
	}
	fake.createCommandReturnsOnCall[i] = struct {
		result1 *platform.ExecCommand
	}{result1}
}

func (fake *FakeCommandFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCommandFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ platform.CommandFactory = new(FakeCommandFactory)
