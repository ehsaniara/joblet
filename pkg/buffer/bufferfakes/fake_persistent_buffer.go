// Code generated by counterfeiter. DO NOT EDIT.
package bufferfakes

import (
	"context"
	"io"
	"joblet/pkg/buffer"
	"sync"
)

type FakePersistentBuffer struct {
	CapStub        func() int
	capMutex       sync.RWMutex
	capArgsForCall []struct {
	}
	capReturns struct {
		result1 int
	}
	capReturnsOnCall map[int]struct {
		result1 int
	}
	ClearStub        func() error
	clearMutex       sync.RWMutex
	clearArgsForCall []struct {
	}
	clearReturns struct {
		result1 error
	}
	clearReturnsOnCall map[int]struct {
		result1 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	GetPathStub        func() string
	getPathMutex       sync.RWMutex
	getPathArgsForCall []struct {
	}
	getPathReturns struct {
		result1 string
	}
	getPathReturnsOnCall map[int]struct {
		result1 string
	}
	GetSizeStub        func() (int64, error)
	getSizeMutex       sync.RWMutex
	getSizeArgsForCall []struct {
	}
	getSizeReturns struct {
		result1 int64
		result2 error
	}
	getSizeReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	IsClosedStub        func() bool
	isClosedMutex       sync.RWMutex
	isClosedArgsForCall []struct {
	}
	isClosedReturns struct {
		result1 bool
	}
	isClosedReturnsOnCall map[int]struct {
		result1 bool
	}
	LenStub        func() int
	lenMutex       sync.RWMutex
	lenArgsForCall []struct {
	}
	lenReturns struct {
		result1 int
	}
	lenReturnsOnCall map[int]struct {
		result1 int
	}
	ReadStub        func() ([]byte, error)
	readMutex       sync.RWMutex
	readArgsForCall []struct {
	}
	readReturns struct {
		result1 []byte
		result2 error
	}
	readReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	ReadFromStub        func(io.Reader) (int64, error)
	readFromMutex       sync.RWMutex
	readFromArgsForCall []struct {
		arg1 io.Reader
	}
	readFromReturns struct {
		result1 int64
		result2 error
	}
	readFromReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	RotateStub        func() error
	rotateMutex       sync.RWMutex
	rotateArgsForCall []struct {
	}
	rotateReturns struct {
		result1 error
	}
	rotateReturnsOnCall map[int]struct {
		result1 error
	}
	SubscribeStub        func(context.Context) (<-chan []byte, func(), error)
	subscribeMutex       sync.RWMutex
	subscribeArgsForCall []struct {
		arg1 context.Context
	}
	subscribeReturns struct {
		result1 <-chan []byte
		result2 func()
		result3 error
	}
	subscribeReturnsOnCall map[int]struct {
		result1 <-chan []byte
		result2 func()
		result3 error
	}
	SyncStub        func() error
	syncMutex       sync.RWMutex
	syncArgsForCall []struct {
	}
	syncReturns struct {
		result1 error
	}
	syncReturnsOnCall map[int]struct {
		result1 error
	}
	TruncateStub        func(int64) error
	truncateMutex       sync.RWMutex
	truncateArgsForCall []struct {
		arg1 int64
	}
	truncateReturns struct {
		result1 error
	}
	truncateReturnsOnCall map[int]struct {
		result1 error
	}
	WriteStub        func([]byte) (int, error)
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		arg1 []byte
	}
	writeReturns struct {
		result1 int
		result2 error
	}
	writeReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePersistentBuffer) Cap() int {
	fake.capMutex.Lock()
	ret, specificReturn := fake.capReturnsOnCall[len(fake.capArgsForCall)]
	fake.capArgsForCall = append(fake.capArgsForCall, struct {
	}{})
	stub := fake.CapStub
	fakeReturns := fake.capReturns
	fake.recordInvocation("Cap", []interface{}{})
	fake.capMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePersistentBuffer) CapCallCount() int {
	fake.capMutex.RLock()
	defer fake.capMutex.RUnlock()
	return len(fake.capArgsForCall)
}

func (fake *FakePersistentBuffer) CapCalls(stub func() int) {
	fake.capMutex.Lock()
	defer fake.capMutex.Unlock()
	fake.CapStub = stub
}

func (fake *FakePersistentBuffer) CapReturns(result1 int) {
	fake.capMutex.Lock()
	defer fake.capMutex.Unlock()
	fake.CapStub = nil
	fake.capReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakePersistentBuffer) CapReturnsOnCall(i int, result1 int) {
	fake.capMutex.Lock()
	defer fake.capMutex.Unlock()
	fake.CapStub = nil
	if fake.capReturnsOnCall == nil {
		fake.capReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.capReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakePersistentBuffer) Clear() error {
	fake.clearMutex.Lock()
	ret, specificReturn := fake.clearReturnsOnCall[len(fake.clearArgsForCall)]
	fake.clearArgsForCall = append(fake.clearArgsForCall, struct {
	}{})
	stub := fake.ClearStub
	fakeReturns := fake.clearReturns
	fake.recordInvocation("Clear", []interface{}{})
	fake.clearMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePersistentBuffer) ClearCallCount() int {
	fake.clearMutex.RLock()
	defer fake.clearMutex.RUnlock()
	return len(fake.clearArgsForCall)
}

func (fake *FakePersistentBuffer) ClearCalls(stub func() error) {
	fake.clearMutex.Lock()
	defer fake.clearMutex.Unlock()
	fake.ClearStub = stub
}

func (fake *FakePersistentBuffer) ClearReturns(result1 error) {
	fake.clearMutex.Lock()
	defer fake.clearMutex.Unlock()
	fake.ClearStub = nil
	fake.clearReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePersistentBuffer) ClearReturnsOnCall(i int, result1 error) {
	fake.clearMutex.Lock()
	defer fake.clearMutex.Unlock()
	fake.ClearStub = nil
	if fake.clearReturnsOnCall == nil {
		fake.clearReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.clearReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePersistentBuffer) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePersistentBuffer) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakePersistentBuffer) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakePersistentBuffer) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePersistentBuffer) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePersistentBuffer) GetPath() string {
	fake.getPathMutex.Lock()
	ret, specificReturn := fake.getPathReturnsOnCall[len(fake.getPathArgsForCall)]
	fake.getPathArgsForCall = append(fake.getPathArgsForCall, struct {
	}{})
	stub := fake.GetPathStub
	fakeReturns := fake.getPathReturns
	fake.recordInvocation("GetPath", []interface{}{})
	fake.getPathMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePersistentBuffer) GetPathCallCount() int {
	fake.getPathMutex.RLock()
	defer fake.getPathMutex.RUnlock()
	return len(fake.getPathArgsForCall)
}

func (fake *FakePersistentBuffer) GetPathCalls(stub func() string) {
	fake.getPathMutex.Lock()
	defer fake.getPathMutex.Unlock()
	fake.GetPathStub = stub
}

func (fake *FakePersistentBuffer) GetPathReturns(result1 string) {
	fake.getPathMutex.Lock()
	defer fake.getPathMutex.Unlock()
	fake.GetPathStub = nil
	fake.getPathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakePersistentBuffer) GetPathReturnsOnCall(i int, result1 string) {
	fake.getPathMutex.Lock()
	defer fake.getPathMutex.Unlock()
	fake.GetPathStub = nil
	if fake.getPathReturnsOnCall == nil {
		fake.getPathReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getPathReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakePersistentBuffer) GetSize() (int64, error) {
	fake.getSizeMutex.Lock()
	ret, specificReturn := fake.getSizeReturnsOnCall[len(fake.getSizeArgsForCall)]
	fake.getSizeArgsForCall = append(fake.getSizeArgsForCall, struct {
	}{})
	stub := fake.GetSizeStub
	fakeReturns := fake.getSizeReturns
	fake.recordInvocation("GetSize", []interface{}{})
	fake.getSizeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePersistentBuffer) GetSizeCallCount() int {
	fake.getSizeMutex.RLock()
	defer fake.getSizeMutex.RUnlock()
	return len(fake.getSizeArgsForCall)
}

func (fake *FakePersistentBuffer) GetSizeCalls(stub func() (int64, error)) {
	fake.getSizeMutex.Lock()
	defer fake.getSizeMutex.Unlock()
	fake.GetSizeStub = stub
}

func (fake *FakePersistentBuffer) GetSizeReturns(result1 int64, result2 error) {
	fake.getSizeMutex.Lock()
	defer fake.getSizeMutex.Unlock()
	fake.GetSizeStub = nil
	fake.getSizeReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakePersistentBuffer) GetSizeReturnsOnCall(i int, result1 int64, result2 error) {
	fake.getSizeMutex.Lock()
	defer fake.getSizeMutex.Unlock()
	fake.GetSizeStub = nil
	if fake.getSizeReturnsOnCall == nil {
		fake.getSizeReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.getSizeReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakePersistentBuffer) IsClosed() bool {
	fake.isClosedMutex.Lock()
	ret, specificReturn := fake.isClosedReturnsOnCall[len(fake.isClosedArgsForCall)]
	fake.isClosedArgsForCall = append(fake.isClosedArgsForCall, struct {
	}{})
	stub := fake.IsClosedStub
	fakeReturns := fake.isClosedReturns
	fake.recordInvocation("IsClosed", []interface{}{})
	fake.isClosedMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePersistentBuffer) IsClosedCallCount() int {
	fake.isClosedMutex.RLock()
	defer fake.isClosedMutex.RUnlock()
	return len(fake.isClosedArgsForCall)
}

func (fake *FakePersistentBuffer) IsClosedCalls(stub func() bool) {
	fake.isClosedMutex.Lock()
	defer fake.isClosedMutex.Unlock()
	fake.IsClosedStub = stub
}

func (fake *FakePersistentBuffer) IsClosedReturns(result1 bool) {
	fake.isClosedMutex.Lock()
	defer fake.isClosedMutex.Unlock()
	fake.IsClosedStub = nil
	fake.isClosedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakePersistentBuffer) IsClosedReturnsOnCall(i int, result1 bool) {
	fake.isClosedMutex.Lock()
	defer fake.isClosedMutex.Unlock()
	fake.IsClosedStub = nil
	if fake.isClosedReturnsOnCall == nil {
		fake.isClosedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isClosedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakePersistentBuffer) Len() int {
	fake.lenMutex.Lock()
	ret, specificReturn := fake.lenReturnsOnCall[len(fake.lenArgsForCall)]
	fake.lenArgsForCall = append(fake.lenArgsForCall, struct {
	}{})
	stub := fake.LenStub
	fakeReturns := fake.lenReturns
	fake.recordInvocation("Len", []interface{}{})
	fake.lenMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePersistentBuffer) LenCallCount() int {
	fake.lenMutex.RLock()
	defer fake.lenMutex.RUnlock()
	return len(fake.lenArgsForCall)
}

func (fake *FakePersistentBuffer) LenCalls(stub func() int) {
	fake.lenMutex.Lock()
	defer fake.lenMutex.Unlock()
	fake.LenStub = stub
}

func (fake *FakePersistentBuffer) LenReturns(result1 int) {
	fake.lenMutex.Lock()
	defer fake.lenMutex.Unlock()
	fake.LenStub = nil
	fake.lenReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakePersistentBuffer) LenReturnsOnCall(i int, result1 int) {
	fake.lenMutex.Lock()
	defer fake.lenMutex.Unlock()
	fake.LenStub = nil
	if fake.lenReturnsOnCall == nil {
		fake.lenReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.lenReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakePersistentBuffer) Read() ([]byte, error) {
	fake.readMutex.Lock()
	ret, specificReturn := fake.readReturnsOnCall[len(fake.readArgsForCall)]
	fake.readArgsForCall = append(fake.readArgsForCall, struct {
	}{})
	stub := fake.ReadStub
	fakeReturns := fake.readReturns
	fake.recordInvocation("Read", []interface{}{})
	fake.readMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePersistentBuffer) ReadCallCount() int {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return len(fake.readArgsForCall)
}

func (fake *FakePersistentBuffer) ReadCalls(stub func() ([]byte, error)) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = stub
}

func (fake *FakePersistentBuffer) ReadReturns(result1 []byte, result2 error) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = nil
	fake.readReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakePersistentBuffer) ReadReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = nil
	if fake.readReturnsOnCall == nil {
		fake.readReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.readReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakePersistentBuffer) ReadFrom(arg1 io.Reader) (int64, error) {
	fake.readFromMutex.Lock()
	ret, specificReturn := fake.readFromReturnsOnCall[len(fake.readFromArgsForCall)]
	fake.readFromArgsForCall = append(fake.readFromArgsForCall, struct {
		arg1 io.Reader
	}{arg1})
	stub := fake.ReadFromStub
	fakeReturns := fake.readFromReturns
	fake.recordInvocation("ReadFrom", []interface{}{arg1})
	fake.readFromMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePersistentBuffer) ReadFromCallCount() int {
	fake.readFromMutex.RLock()
	defer fake.readFromMutex.RUnlock()
	return len(fake.readFromArgsForCall)
}

func (fake *FakePersistentBuffer) ReadFromCalls(stub func(io.Reader) (int64, error)) {
	fake.readFromMutex.Lock()
	defer fake.readFromMutex.Unlock()
	fake.ReadFromStub = stub
}

func (fake *FakePersistentBuffer) ReadFromArgsForCall(i int) io.Reader {
	fake.readFromMutex.RLock()
	defer fake.readFromMutex.RUnlock()
	argsForCall := fake.readFromArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePersistentBuffer) ReadFromReturns(result1 int64, result2 error) {
	fake.readFromMutex.Lock()
	defer fake.readFromMutex.Unlock()
	fake.ReadFromStub = nil
	fake.readFromReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakePersistentBuffer) ReadFromReturnsOnCall(i int, result1 int64, result2 error) {
	fake.readFromMutex.Lock()
	defer fake.readFromMutex.Unlock()
	fake.ReadFromStub = nil
	if fake.readFromReturnsOnCall == nil {
		fake.readFromReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.readFromReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakePersistentBuffer) Rotate() error {
	fake.rotateMutex.Lock()
	ret, specificReturn := fake.rotateReturnsOnCall[len(fake.rotateArgsForCall)]
	fake.rotateArgsForCall = append(fake.rotateArgsForCall, struct {
	}{})
	stub := fake.RotateStub
	fakeReturns := fake.rotateReturns
	fake.recordInvocation("Rotate", []interface{}{})
	fake.rotateMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePersistentBuffer) RotateCallCount() int {
	fake.rotateMutex.RLock()
	defer fake.rotateMutex.RUnlock()
	return len(fake.rotateArgsForCall)
}

func (fake *FakePersistentBuffer) RotateCalls(stub func() error) {
	fake.rotateMutex.Lock()
	defer fake.rotateMutex.Unlock()
	fake.RotateStub = stub
}

func (fake *FakePersistentBuffer) RotateReturns(result1 error) {
	fake.rotateMutex.Lock()
	defer fake.rotateMutex.Unlock()
	fake.RotateStub = nil
	fake.rotateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePersistentBuffer) RotateReturnsOnCall(i int, result1 error) {
	fake.rotateMutex.Lock()
	defer fake.rotateMutex.Unlock()
	fake.RotateStub = nil
	if fake.rotateReturnsOnCall == nil {
		fake.rotateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.rotateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePersistentBuffer) Subscribe(arg1 context.Context) (<-chan []byte, func(), error) {
	fake.subscribeMutex.Lock()
	ret, specificReturn := fake.subscribeReturnsOnCall[len(fake.subscribeArgsForCall)]
	fake.subscribeArgsForCall = append(fake.subscribeArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.SubscribeStub
	fakeReturns := fake.subscribeReturns
	fake.recordInvocation("Subscribe", []interface{}{arg1})
	fake.subscribeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakePersistentBuffer) SubscribeCallCount() int {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	return len(fake.subscribeArgsForCall)
}

func (fake *FakePersistentBuffer) SubscribeCalls(stub func(context.Context) (<-chan []byte, func(), error)) {
	fake.subscribeMutex.Lock()
	defer fake.subscribeMutex.Unlock()
	fake.SubscribeStub = stub
}

func (fake *FakePersistentBuffer) SubscribeArgsForCall(i int) context.Context {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	argsForCall := fake.subscribeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePersistentBuffer) SubscribeReturns(result1 <-chan []byte, result2 func(), result3 error) {
	fake.subscribeMutex.Lock()
	defer fake.subscribeMutex.Unlock()
	fake.SubscribeStub = nil
	fake.subscribeReturns = struct {
		result1 <-chan []byte
		result2 func()
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePersistentBuffer) SubscribeReturnsOnCall(i int, result1 <-chan []byte, result2 func(), result3 error) {
	fake.subscribeMutex.Lock()
	defer fake.subscribeMutex.Unlock()
	fake.SubscribeStub = nil
	if fake.subscribeReturnsOnCall == nil {
		fake.subscribeReturnsOnCall = make(map[int]struct {
			result1 <-chan []byte
			result2 func()
			result3 error
		})
	}
	fake.subscribeReturnsOnCall[i] = struct {
		result1 <-chan []byte
		result2 func()
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePersistentBuffer) Sync() error {
	fake.syncMutex.Lock()
	ret, specificReturn := fake.syncReturnsOnCall[len(fake.syncArgsForCall)]
	fake.syncArgsForCall = append(fake.syncArgsForCall, struct {
	}{})
	stub := fake.SyncStub
	fakeReturns := fake.syncReturns
	fake.recordInvocation("Sync", []interface{}{})
	fake.syncMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePersistentBuffer) SyncCallCount() int {
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	return len(fake.syncArgsForCall)
}

func (fake *FakePersistentBuffer) SyncCalls(stub func() error) {
	fake.syncMutex.Lock()
	defer fake.syncMutex.Unlock()
	fake.SyncStub = stub
}

func (fake *FakePersistentBuffer) SyncReturns(result1 error) {
	fake.syncMutex.Lock()
	defer fake.syncMutex.Unlock()
	fake.SyncStub = nil
	fake.syncReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePersistentBuffer) SyncReturnsOnCall(i int, result1 error) {
	fake.syncMutex.Lock()
	defer fake.syncMutex.Unlock()
	fake.SyncStub = nil
	if fake.syncReturnsOnCall == nil {
		fake.syncReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.syncReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePersistentBuffer) Truncate(arg1 int64) error {
	fake.truncateMutex.Lock()
	ret, specificReturn := fake.truncateReturnsOnCall[len(fake.truncateArgsForCall)]
	fake.truncateArgsForCall = append(fake.truncateArgsForCall, struct {
		arg1 int64
	}{arg1})
	stub := fake.TruncateStub
	fakeReturns := fake.truncateReturns
	fake.recordInvocation("Truncate", []interface{}{arg1})
	fake.truncateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePersistentBuffer) TruncateCallCount() int {
	fake.truncateMutex.RLock()
	defer fake.truncateMutex.RUnlock()
	return len(fake.truncateArgsForCall)
}

func (fake *FakePersistentBuffer) TruncateCalls(stub func(int64) error) {
	fake.truncateMutex.Lock()
	defer fake.truncateMutex.Unlock()
	fake.TruncateStub = stub
}

func (fake *FakePersistentBuffer) TruncateArgsForCall(i int) int64 {
	fake.truncateMutex.RLock()
	defer fake.truncateMutex.RUnlock()
	argsForCall := fake.truncateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePersistentBuffer) TruncateReturns(result1 error) {
	fake.truncateMutex.Lock()
	defer fake.truncateMutex.Unlock()
	fake.TruncateStub = nil
	fake.truncateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePersistentBuffer) TruncateReturnsOnCall(i int, result1 error) {
	fake.truncateMutex.Lock()
	defer fake.truncateMutex.Unlock()
	fake.TruncateStub = nil
	if fake.truncateReturnsOnCall == nil {
		fake.truncateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.truncateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePersistentBuffer) Write(arg1 []byte) (int, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.writeMutex.Lock()
	ret, specificReturn := fake.writeReturnsOnCall[len(fake.writeArgsForCall)]
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.WriteStub
	fakeReturns := fake.writeReturns
	fake.recordInvocation("Write", []interface{}{arg1Copy})
	fake.writeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePersistentBuffer) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakePersistentBuffer) WriteCalls(stub func([]byte) (int, error)) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = stub
}

func (fake *FakePersistentBuffer) WriteArgsForCall(i int) []byte {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	argsForCall := fake.writeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePersistentBuffer) WriteReturns(result1 int, result2 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakePersistentBuffer) WriteReturnsOnCall(i int, result1 int, result2 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	if fake.writeReturnsOnCall == nil {
		fake.writeReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.writeReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakePersistentBuffer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePersistentBuffer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ buffer.PersistentBuffer = new(FakePersistentBuffer)
