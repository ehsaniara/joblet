// Code generated by counterfeiter. DO NOT EDIT.
package bufferfakes

import (
	"context"
	"io"
	"joblet/pkg/buffer"
	"sync"
)

type FakeRingBuffer struct {
	CapStub        func() int
	capMutex       sync.RWMutex
	capArgsForCall []struct {
	}
	capReturns struct {
		result1 int
	}
	capReturnsOnCall map[int]struct {
		result1 int
	}
	ClearStub        func() error
	clearMutex       sync.RWMutex
	clearArgsForCall []struct {
	}
	clearReturns struct {
		result1 error
	}
	clearReturnsOnCall map[int]struct {
		result1 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	GetCapacityStub        func() int
	getCapacityMutex       sync.RWMutex
	getCapacityArgsForCall []struct {
	}
	getCapacityReturns struct {
		result1 int
	}
	getCapacityReturnsOnCall map[int]struct {
		result1 int
	}
	GetNewestDataStub        func() ([]byte, error)
	getNewestDataMutex       sync.RWMutex
	getNewestDataArgsForCall []struct {
	}
	getNewestDataReturns struct {
		result1 []byte
		result2 error
	}
	getNewestDataReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	GetOldestDataStub        func() ([]byte, error)
	getOldestDataMutex       sync.RWMutex
	getOldestDataArgsForCall []struct {
	}
	getOldestDataReturns struct {
		result1 []byte
		result2 error
	}
	getOldestDataReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	IsClosedStub        func() bool
	isClosedMutex       sync.RWMutex
	isClosedArgsForCall []struct {
	}
	isClosedReturns struct {
		result1 bool
	}
	isClosedReturnsOnCall map[int]struct {
		result1 bool
	}
	IsWrappedStub        func() bool
	isWrappedMutex       sync.RWMutex
	isWrappedArgsForCall []struct {
	}
	isWrappedReturns struct {
		result1 bool
	}
	isWrappedReturnsOnCall map[int]struct {
		result1 bool
	}
	LenStub        func() int
	lenMutex       sync.RWMutex
	lenArgsForCall []struct {
	}
	lenReturns struct {
		result1 int
	}
	lenReturnsOnCall map[int]struct {
		result1 int
	}
	ReadStub        func() ([]byte, error)
	readMutex       sync.RWMutex
	readArgsForCall []struct {
	}
	readReturns struct {
		result1 []byte
		result2 error
	}
	readReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	ReadFromStub        func(io.Reader) (int64, error)
	readFromMutex       sync.RWMutex
	readFromArgsForCall []struct {
		arg1 io.Reader
	}
	readFromReturns struct {
		result1 int64
		result2 error
	}
	readFromReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	SetCapacityStub        func(int) error
	setCapacityMutex       sync.RWMutex
	setCapacityArgsForCall []struct {
		arg1 int
	}
	setCapacityReturns struct {
		result1 error
	}
	setCapacityReturnsOnCall map[int]struct {
		result1 error
	}
	SubscribeStub        func(context.Context) (<-chan []byte, func(), error)
	subscribeMutex       sync.RWMutex
	subscribeArgsForCall []struct {
		arg1 context.Context
	}
	subscribeReturns struct {
		result1 <-chan []byte
		result2 func()
		result3 error
	}
	subscribeReturnsOnCall map[int]struct {
		result1 <-chan []byte
		result2 func()
		result3 error
	}
	WriteStub        func([]byte) (int, error)
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		arg1 []byte
	}
	writeReturns struct {
		result1 int
		result2 error
	}
	writeReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRingBuffer) Cap() int {
	fake.capMutex.Lock()
	ret, specificReturn := fake.capReturnsOnCall[len(fake.capArgsForCall)]
	fake.capArgsForCall = append(fake.capArgsForCall, struct {
	}{})
	stub := fake.CapStub
	fakeReturns := fake.capReturns
	fake.recordInvocation("Cap", []interface{}{})
	fake.capMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRingBuffer) CapCallCount() int {
	fake.capMutex.RLock()
	defer fake.capMutex.RUnlock()
	return len(fake.capArgsForCall)
}

func (fake *FakeRingBuffer) CapCalls(stub func() int) {
	fake.capMutex.Lock()
	defer fake.capMutex.Unlock()
	fake.CapStub = stub
}

func (fake *FakeRingBuffer) CapReturns(result1 int) {
	fake.capMutex.Lock()
	defer fake.capMutex.Unlock()
	fake.CapStub = nil
	fake.capReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeRingBuffer) CapReturnsOnCall(i int, result1 int) {
	fake.capMutex.Lock()
	defer fake.capMutex.Unlock()
	fake.CapStub = nil
	if fake.capReturnsOnCall == nil {
		fake.capReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.capReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeRingBuffer) Clear() error {
	fake.clearMutex.Lock()
	ret, specificReturn := fake.clearReturnsOnCall[len(fake.clearArgsForCall)]
	fake.clearArgsForCall = append(fake.clearArgsForCall, struct {
	}{})
	stub := fake.ClearStub
	fakeReturns := fake.clearReturns
	fake.recordInvocation("Clear", []interface{}{})
	fake.clearMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRingBuffer) ClearCallCount() int {
	fake.clearMutex.RLock()
	defer fake.clearMutex.RUnlock()
	return len(fake.clearArgsForCall)
}

func (fake *FakeRingBuffer) ClearCalls(stub func() error) {
	fake.clearMutex.Lock()
	defer fake.clearMutex.Unlock()
	fake.ClearStub = stub
}

func (fake *FakeRingBuffer) ClearReturns(result1 error) {
	fake.clearMutex.Lock()
	defer fake.clearMutex.Unlock()
	fake.ClearStub = nil
	fake.clearReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRingBuffer) ClearReturnsOnCall(i int, result1 error) {
	fake.clearMutex.Lock()
	defer fake.clearMutex.Unlock()
	fake.ClearStub = nil
	if fake.clearReturnsOnCall == nil {
		fake.clearReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.clearReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRingBuffer) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRingBuffer) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeRingBuffer) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeRingBuffer) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRingBuffer) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRingBuffer) GetCapacity() int {
	fake.getCapacityMutex.Lock()
	ret, specificReturn := fake.getCapacityReturnsOnCall[len(fake.getCapacityArgsForCall)]
	fake.getCapacityArgsForCall = append(fake.getCapacityArgsForCall, struct {
	}{})
	stub := fake.GetCapacityStub
	fakeReturns := fake.getCapacityReturns
	fake.recordInvocation("GetCapacity", []interface{}{})
	fake.getCapacityMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRingBuffer) GetCapacityCallCount() int {
	fake.getCapacityMutex.RLock()
	defer fake.getCapacityMutex.RUnlock()
	return len(fake.getCapacityArgsForCall)
}

func (fake *FakeRingBuffer) GetCapacityCalls(stub func() int) {
	fake.getCapacityMutex.Lock()
	defer fake.getCapacityMutex.Unlock()
	fake.GetCapacityStub = stub
}

func (fake *FakeRingBuffer) GetCapacityReturns(result1 int) {
	fake.getCapacityMutex.Lock()
	defer fake.getCapacityMutex.Unlock()
	fake.GetCapacityStub = nil
	fake.getCapacityReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeRingBuffer) GetCapacityReturnsOnCall(i int, result1 int) {
	fake.getCapacityMutex.Lock()
	defer fake.getCapacityMutex.Unlock()
	fake.GetCapacityStub = nil
	if fake.getCapacityReturnsOnCall == nil {
		fake.getCapacityReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.getCapacityReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeRingBuffer) GetNewestData() ([]byte, error) {
	fake.getNewestDataMutex.Lock()
	ret, specificReturn := fake.getNewestDataReturnsOnCall[len(fake.getNewestDataArgsForCall)]
	fake.getNewestDataArgsForCall = append(fake.getNewestDataArgsForCall, struct {
	}{})
	stub := fake.GetNewestDataStub
	fakeReturns := fake.getNewestDataReturns
	fake.recordInvocation("GetNewestData", []interface{}{})
	fake.getNewestDataMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRingBuffer) GetNewestDataCallCount() int {
	fake.getNewestDataMutex.RLock()
	defer fake.getNewestDataMutex.RUnlock()
	return len(fake.getNewestDataArgsForCall)
}

func (fake *FakeRingBuffer) GetNewestDataCalls(stub func() ([]byte, error)) {
	fake.getNewestDataMutex.Lock()
	defer fake.getNewestDataMutex.Unlock()
	fake.GetNewestDataStub = stub
}

func (fake *FakeRingBuffer) GetNewestDataReturns(result1 []byte, result2 error) {
	fake.getNewestDataMutex.Lock()
	defer fake.getNewestDataMutex.Unlock()
	fake.GetNewestDataStub = nil
	fake.getNewestDataReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRingBuffer) GetNewestDataReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getNewestDataMutex.Lock()
	defer fake.getNewestDataMutex.Unlock()
	fake.GetNewestDataStub = nil
	if fake.getNewestDataReturnsOnCall == nil {
		fake.getNewestDataReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getNewestDataReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRingBuffer) GetOldestData() ([]byte, error) {
	fake.getOldestDataMutex.Lock()
	ret, specificReturn := fake.getOldestDataReturnsOnCall[len(fake.getOldestDataArgsForCall)]
	fake.getOldestDataArgsForCall = append(fake.getOldestDataArgsForCall, struct {
	}{})
	stub := fake.GetOldestDataStub
	fakeReturns := fake.getOldestDataReturns
	fake.recordInvocation("GetOldestData", []interface{}{})
	fake.getOldestDataMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRingBuffer) GetOldestDataCallCount() int {
	fake.getOldestDataMutex.RLock()
	defer fake.getOldestDataMutex.RUnlock()
	return len(fake.getOldestDataArgsForCall)
}

func (fake *FakeRingBuffer) GetOldestDataCalls(stub func() ([]byte, error)) {
	fake.getOldestDataMutex.Lock()
	defer fake.getOldestDataMutex.Unlock()
	fake.GetOldestDataStub = stub
}

func (fake *FakeRingBuffer) GetOldestDataReturns(result1 []byte, result2 error) {
	fake.getOldestDataMutex.Lock()
	defer fake.getOldestDataMutex.Unlock()
	fake.GetOldestDataStub = nil
	fake.getOldestDataReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRingBuffer) GetOldestDataReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getOldestDataMutex.Lock()
	defer fake.getOldestDataMutex.Unlock()
	fake.GetOldestDataStub = nil
	if fake.getOldestDataReturnsOnCall == nil {
		fake.getOldestDataReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getOldestDataReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRingBuffer) IsClosed() bool {
	fake.isClosedMutex.Lock()
	ret, specificReturn := fake.isClosedReturnsOnCall[len(fake.isClosedArgsForCall)]
	fake.isClosedArgsForCall = append(fake.isClosedArgsForCall, struct {
	}{})
	stub := fake.IsClosedStub
	fakeReturns := fake.isClosedReturns
	fake.recordInvocation("IsClosed", []interface{}{})
	fake.isClosedMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRingBuffer) IsClosedCallCount() int {
	fake.isClosedMutex.RLock()
	defer fake.isClosedMutex.RUnlock()
	return len(fake.isClosedArgsForCall)
}

func (fake *FakeRingBuffer) IsClosedCalls(stub func() bool) {
	fake.isClosedMutex.Lock()
	defer fake.isClosedMutex.Unlock()
	fake.IsClosedStub = stub
}

func (fake *FakeRingBuffer) IsClosedReturns(result1 bool) {
	fake.isClosedMutex.Lock()
	defer fake.isClosedMutex.Unlock()
	fake.IsClosedStub = nil
	fake.isClosedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRingBuffer) IsClosedReturnsOnCall(i int, result1 bool) {
	fake.isClosedMutex.Lock()
	defer fake.isClosedMutex.Unlock()
	fake.IsClosedStub = nil
	if fake.isClosedReturnsOnCall == nil {
		fake.isClosedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isClosedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRingBuffer) IsWrapped() bool {
	fake.isWrappedMutex.Lock()
	ret, specificReturn := fake.isWrappedReturnsOnCall[len(fake.isWrappedArgsForCall)]
	fake.isWrappedArgsForCall = append(fake.isWrappedArgsForCall, struct {
	}{})
	stub := fake.IsWrappedStub
	fakeReturns := fake.isWrappedReturns
	fake.recordInvocation("IsWrapped", []interface{}{})
	fake.isWrappedMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRingBuffer) IsWrappedCallCount() int {
	fake.isWrappedMutex.RLock()
	defer fake.isWrappedMutex.RUnlock()
	return len(fake.isWrappedArgsForCall)
}

func (fake *FakeRingBuffer) IsWrappedCalls(stub func() bool) {
	fake.isWrappedMutex.Lock()
	defer fake.isWrappedMutex.Unlock()
	fake.IsWrappedStub = stub
}

func (fake *FakeRingBuffer) IsWrappedReturns(result1 bool) {
	fake.isWrappedMutex.Lock()
	defer fake.isWrappedMutex.Unlock()
	fake.IsWrappedStub = nil
	fake.isWrappedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRingBuffer) IsWrappedReturnsOnCall(i int, result1 bool) {
	fake.isWrappedMutex.Lock()
	defer fake.isWrappedMutex.Unlock()
	fake.IsWrappedStub = nil
	if fake.isWrappedReturnsOnCall == nil {
		fake.isWrappedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isWrappedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRingBuffer) Len() int {
	fake.lenMutex.Lock()
	ret, specificReturn := fake.lenReturnsOnCall[len(fake.lenArgsForCall)]
	fake.lenArgsForCall = append(fake.lenArgsForCall, struct {
	}{})
	stub := fake.LenStub
	fakeReturns := fake.lenReturns
	fake.recordInvocation("Len", []interface{}{})
	fake.lenMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRingBuffer) LenCallCount() int {
	fake.lenMutex.RLock()
	defer fake.lenMutex.RUnlock()
	return len(fake.lenArgsForCall)
}

func (fake *FakeRingBuffer) LenCalls(stub func() int) {
	fake.lenMutex.Lock()
	defer fake.lenMutex.Unlock()
	fake.LenStub = stub
}

func (fake *FakeRingBuffer) LenReturns(result1 int) {
	fake.lenMutex.Lock()
	defer fake.lenMutex.Unlock()
	fake.LenStub = nil
	fake.lenReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeRingBuffer) LenReturnsOnCall(i int, result1 int) {
	fake.lenMutex.Lock()
	defer fake.lenMutex.Unlock()
	fake.LenStub = nil
	if fake.lenReturnsOnCall == nil {
		fake.lenReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.lenReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeRingBuffer) Read() ([]byte, error) {
	fake.readMutex.Lock()
	ret, specificReturn := fake.readReturnsOnCall[len(fake.readArgsForCall)]
	fake.readArgsForCall = append(fake.readArgsForCall, struct {
	}{})
	stub := fake.ReadStub
	fakeReturns := fake.readReturns
	fake.recordInvocation("Read", []interface{}{})
	fake.readMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRingBuffer) ReadCallCount() int {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return len(fake.readArgsForCall)
}

func (fake *FakeRingBuffer) ReadCalls(stub func() ([]byte, error)) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = stub
}

func (fake *FakeRingBuffer) ReadReturns(result1 []byte, result2 error) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = nil
	fake.readReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRingBuffer) ReadReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = nil
	if fake.readReturnsOnCall == nil {
		fake.readReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.readReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRingBuffer) ReadFrom(arg1 io.Reader) (int64, error) {
	fake.readFromMutex.Lock()
	ret, specificReturn := fake.readFromReturnsOnCall[len(fake.readFromArgsForCall)]
	fake.readFromArgsForCall = append(fake.readFromArgsForCall, struct {
		arg1 io.Reader
	}{arg1})
	stub := fake.ReadFromStub
	fakeReturns := fake.readFromReturns
	fake.recordInvocation("ReadFrom", []interface{}{arg1})
	fake.readFromMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRingBuffer) ReadFromCallCount() int {
	fake.readFromMutex.RLock()
	defer fake.readFromMutex.RUnlock()
	return len(fake.readFromArgsForCall)
}

func (fake *FakeRingBuffer) ReadFromCalls(stub func(io.Reader) (int64, error)) {
	fake.readFromMutex.Lock()
	defer fake.readFromMutex.Unlock()
	fake.ReadFromStub = stub
}

func (fake *FakeRingBuffer) ReadFromArgsForCall(i int) io.Reader {
	fake.readFromMutex.RLock()
	defer fake.readFromMutex.RUnlock()
	argsForCall := fake.readFromArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRingBuffer) ReadFromReturns(result1 int64, result2 error) {
	fake.readFromMutex.Lock()
	defer fake.readFromMutex.Unlock()
	fake.ReadFromStub = nil
	fake.readFromReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeRingBuffer) ReadFromReturnsOnCall(i int, result1 int64, result2 error) {
	fake.readFromMutex.Lock()
	defer fake.readFromMutex.Unlock()
	fake.ReadFromStub = nil
	if fake.readFromReturnsOnCall == nil {
		fake.readFromReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.readFromReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeRingBuffer) SetCapacity(arg1 int) error {
	fake.setCapacityMutex.Lock()
	ret, specificReturn := fake.setCapacityReturnsOnCall[len(fake.setCapacityArgsForCall)]
	fake.setCapacityArgsForCall = append(fake.setCapacityArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.SetCapacityStub
	fakeReturns := fake.setCapacityReturns
	fake.recordInvocation("SetCapacity", []interface{}{arg1})
	fake.setCapacityMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRingBuffer) SetCapacityCallCount() int {
	fake.setCapacityMutex.RLock()
	defer fake.setCapacityMutex.RUnlock()
	return len(fake.setCapacityArgsForCall)
}

func (fake *FakeRingBuffer) SetCapacityCalls(stub func(int) error) {
	fake.setCapacityMutex.Lock()
	defer fake.setCapacityMutex.Unlock()
	fake.SetCapacityStub = stub
}

func (fake *FakeRingBuffer) SetCapacityArgsForCall(i int) int {
	fake.setCapacityMutex.RLock()
	defer fake.setCapacityMutex.RUnlock()
	argsForCall := fake.setCapacityArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRingBuffer) SetCapacityReturns(result1 error) {
	fake.setCapacityMutex.Lock()
	defer fake.setCapacityMutex.Unlock()
	fake.SetCapacityStub = nil
	fake.setCapacityReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRingBuffer) SetCapacityReturnsOnCall(i int, result1 error) {
	fake.setCapacityMutex.Lock()
	defer fake.setCapacityMutex.Unlock()
	fake.SetCapacityStub = nil
	if fake.setCapacityReturnsOnCall == nil {
		fake.setCapacityReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setCapacityReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRingBuffer) Subscribe(arg1 context.Context) (<-chan []byte, func(), error) {
	fake.subscribeMutex.Lock()
	ret, specificReturn := fake.subscribeReturnsOnCall[len(fake.subscribeArgsForCall)]
	fake.subscribeArgsForCall = append(fake.subscribeArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.SubscribeStub
	fakeReturns := fake.subscribeReturns
	fake.recordInvocation("Subscribe", []interface{}{arg1})
	fake.subscribeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeRingBuffer) SubscribeCallCount() int {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	return len(fake.subscribeArgsForCall)
}

func (fake *FakeRingBuffer) SubscribeCalls(stub func(context.Context) (<-chan []byte, func(), error)) {
	fake.subscribeMutex.Lock()
	defer fake.subscribeMutex.Unlock()
	fake.SubscribeStub = stub
}

func (fake *FakeRingBuffer) SubscribeArgsForCall(i int) context.Context {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	argsForCall := fake.subscribeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRingBuffer) SubscribeReturns(result1 <-chan []byte, result2 func(), result3 error) {
	fake.subscribeMutex.Lock()
	defer fake.subscribeMutex.Unlock()
	fake.SubscribeStub = nil
	fake.subscribeReturns = struct {
		result1 <-chan []byte
		result2 func()
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRingBuffer) SubscribeReturnsOnCall(i int, result1 <-chan []byte, result2 func(), result3 error) {
	fake.subscribeMutex.Lock()
	defer fake.subscribeMutex.Unlock()
	fake.SubscribeStub = nil
	if fake.subscribeReturnsOnCall == nil {
		fake.subscribeReturnsOnCall = make(map[int]struct {
			result1 <-chan []byte
			result2 func()
			result3 error
		})
	}
	fake.subscribeReturnsOnCall[i] = struct {
		result1 <-chan []byte
		result2 func()
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRingBuffer) Write(arg1 []byte) (int, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.writeMutex.Lock()
	ret, specificReturn := fake.writeReturnsOnCall[len(fake.writeArgsForCall)]
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.WriteStub
	fakeReturns := fake.writeReturns
	fake.recordInvocation("Write", []interface{}{arg1Copy})
	fake.writeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRingBuffer) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeRingBuffer) WriteCalls(stub func([]byte) (int, error)) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = stub
}

func (fake *FakeRingBuffer) WriteArgsForCall(i int) []byte {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	argsForCall := fake.writeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRingBuffer) WriteReturns(result1 int, result2 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeRingBuffer) WriteReturnsOnCall(i int, result1 int, result2 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	if fake.writeReturnsOnCall == nil {
		fake.writeReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.writeReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeRingBuffer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRingBuffer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ buffer.RingBuffer = new(FakeRingBuffer)
