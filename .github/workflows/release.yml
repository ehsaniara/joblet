name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build release binaries
        run: |
          # Linux binaries (joblet, rnx)
          GOOS=linux GOARCH=amd64 go build -o joblet-linux-amd64 ./cmd/joblet
          GOOS=linux GOARCH=amd64 go build -o rnx-linux-amd64 ./cmd/cli
          
          # macOS CLI only
          GOOS=darwin GOARCH=amd64 go build -o rnx-darwin-amd64 ./cmd/cli
          GOOS=darwin GOARCH=arm64 go build -o rnx-darwin-arm64 ./cmd/cli
          
          # Windows CLI only
          GOOS=windows GOARCH=amd64 go build -o rnx-windows-amd64.exe ./cmd/cli
          
          # Create archives
          # Linux (includes all three binaries)
          tar -czf joblet-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz joblet-linux-amd64 rnx-linux-amd64 
          
          # macOS (CLI only)
          tar -czf rnx-${{ steps.version.outputs.VERSION }}-darwin-amd64.tar.gz rnx-darwin-amd64
          tar -czf rnx-${{ steps.version.outputs.VERSION }}-darwin-arm64.tar.gz rnx-darwin-arm64
          
          # Windows (CLI only)
          zip rnx-${{ steps.version.outputs.VERSION }}-windows-amd64.zip rnx-windows-amd64.exe

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            joblet-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz
            rnx-${{ steps.version.outputs.VERSION }}-*.tar.gz
            rnx-${{ steps.version.outputs.VERSION }}-*.zip
          generate_release_notes: true