name: Cross-Platform RNX CLI Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-cross-platform-rnx:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build RNX CLI for all platforms and architectures
        run: |
          echo "üöÄ Building RNX CLI for all platforms and architectures..."
          
          # Create build directory
          mkdir -p dist
          
          # Linux (Desktop/Client usage)
          echo "üêß Building Linux RNX CLI variants..."
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.VERSION }} -w -s" -o dist/rnx-linux-amd64 ./cmd/rnx
          GOOS=linux GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.version.outputs.VERSION }} -w -s" -o dist/rnx-linux-arm64 ./cmd/rnx
          GOOS=linux GOARCH=386 go build -ldflags "-X main.version=${{ steps.version.outputs.VERSION }} -w -s" -o dist/rnx-linux-386 ./cmd/rnx
          
          # macOS (Intel and Apple Silicon)
          echo "üçé Building macOS RNX CLI variants..."
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.VERSION }} -w -s" -o dist/rnx-darwin-amd64 ./cmd/rnx
          GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.version.outputs.VERSION }} -w -s" -o dist/rnx-darwin-arm64 ./cmd/rnx
          
          # Windows (Intel and ARM)
          echo "ü™ü Building Windows RNX CLI variants..."
          GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.VERSION }} -w -s" -o dist/rnx-windows-amd64.exe ./cmd/rnx
          GOOS=windows GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.version.outputs.VERSION }} -w -s" -o dist/rnx-windows-arm64.exe ./cmd/rnx
          GOOS=windows GOARCH=386 go build -ldflags "-X main.version=${{ steps.version.outputs.VERSION }} -w -s" -o dist/rnx-windows-386.exe ./cmd/rnx
          
          # FreeBSD (for completeness)
          echo "üòà Building FreeBSD RNX CLI variants..."
          GOOS=freebsd GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.VERSION }} -w -s" -o dist/rnx-freebsd-amd64 ./cmd/rnx
          GOOS=freebsd GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.version.outputs.VERSION }} -w -s" -o dist/rnx-freebsd-arm64 ./cmd/rnx

      - name: Create platform-specific archives
        run: |
          echo "üì¶ Creating platform-specific archives..."
          cd dist
          
          # Linux archives
          tar -czf rnx-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz rnx-linux-amd64
          tar -czf rnx-${{ steps.version.outputs.VERSION }}-linux-arm64.tar.gz rnx-linux-arm64
          tar -czf rnx-${{ steps.version.outputs.VERSION }}-linux-386.tar.gz rnx-linux-386
          
          # macOS archives (separate for Intel and Apple Silicon)
          tar -czf rnx-${{ steps.version.outputs.VERSION }}-darwin-amd64.tar.gz rnx-darwin-amd64
          tar -czf rnx-${{ steps.version.outputs.VERSION }}-darwin-arm64.tar.gz rnx-darwin-arm64
          
          # Universal macOS archive (includes both architectures)
          mkdir -p universal-macos
          cp rnx-darwin-amd64 universal-macos/rnx-intel
          cp rnx-darwin-arm64 universal-macos/rnx-apple-silicon
          cat > universal-macos/install.sh << 'EOF'
          #!/bin/bash
          # Universal macOS installer for RNX CLI
          ARCH=$(uname -m)
          if [ "$ARCH" = "arm64" ]; then
              echo "Installing RNX for Apple Silicon (M1/M2/M3)..."
              cp rnx-apple-silicon /usr/local/bin/rnx
          else
              echo "Installing RNX for Intel..."
              cp rnx-intel /usr/local/bin/rnx
          fi
          chmod +x /usr/local/bin/rnx
          echo "‚úÖ RNX CLI installed successfully!"
          echo "Usage: rnx --help"
          EOF
          chmod +x universal-macos/install.sh
          tar -czf rnx-${{ steps.version.outputs.VERSION }}-darwin-universal.tar.gz -C universal-macos .
          
          # Windows archives
          zip rnx-${{ steps.version.outputs.VERSION }}-windows-amd64.zip rnx-windows-amd64.exe
          zip rnx-${{ steps.version.outputs.VERSION }}-windows-arm64.zip rnx-windows-arm64.exe
          zip rnx-${{ steps.version.outputs.VERSION }}-windows-386.zip rnx-windows-386.exe
          
          # FreeBSD archives
          tar -czf rnx-${{ steps.version.outputs.VERSION }}-freebsd-amd64.tar.gz rnx-freebsd-amd64
          tar -czf rnx-${{ steps.version.outputs.VERSION }}-freebsd-arm64.tar.gz rnx-freebsd-arm64

      - name: Generate checksums
        run: |
          cd dist
          echo "üîê Generating checksums for all RNX CLI releases..."
          sha256sum *.tar.gz *.zip > rnx-checksums.txt
          echo "üìã Checksums generated:"
          cat rnx-checksums.txt

      - name: Create Cross-Platform RNX CLI Release
        uses: softprops/action-gh-release@v2
        with:
          name: "RNX CLI ${{ steps.version.outputs.VERSION }} - Cross Platform"
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/rnx-checksums.txt
          body: |
            # üöÄ RNX CLI ${{ steps.version.outputs.VERSION }} - Cross Platform Release
            
            **RNX** is the cross-platform command-line client for Joblet. Use it to connect to Joblet servers from any platform.
            
            ## üì• Quick Installation
            
            ### üçé macOS
            ```bash
            # Intel Macs
            curl -L https://github.com/ehsaniara/joblet/releases/download/${{ steps.version.outputs.VERSION }}/rnx-${{ steps.version.outputs.VERSION }}-darwin-amd64.tar.gz | tar xz
            sudo mv rnx-darwin-amd64 /usr/local/bin/rnx
            
            # Apple Silicon (M1/M2/M3)
            curl -L https://github.com/ehsaniara/joblet/releases/download/${{ steps.version.outputs.VERSION }}/rnx-${{ steps.version.outputs.VERSION }}-darwin-arm64.tar.gz | tar xz
            sudo mv rnx-darwin-arm64 /usr/local/bin/rnx
            
            # Universal installer (auto-detects architecture)
            curl -L https://github.com/ehsaniara/joblet/releases/download/${{ steps.version.outputs.VERSION }}/rnx-${{ steps.version.outputs.VERSION }}-darwin-universal.tar.gz | tar xz
            sudo bash install.sh
            ```
            
            ### ü™ü Windows
            ```powershell
            # AMD64 (Intel/AMD)
            Invoke-WebRequest -Uri "https://github.com/ehsaniara/joblet/releases/download/${{ steps.version.outputs.VERSION }}/rnx-${{ steps.version.outputs.VERSION }}-windows-amd64.zip" -OutFile "rnx.zip"
            Expand-Archive rnx.zip
            Move-Item rnx\rnx-windows-amd64.exe "C:\Program Files\rnx.exe"
            
            # ARM64 (Surface Pro X, other ARM Windows)
            Invoke-WebRequest -Uri "https://github.com/ehsaniara/joblet/releases/download/${{ steps.version.outputs.VERSION }}/rnx-${{ steps.version.outputs.VERSION }}-windows-arm64.zip" -OutFile "rnx.zip"
            ```
            
            ### üêß Linux (Desktop/Client)
            ```bash
            # AMD64 (Intel/AMD)
            curl -L https://github.com/ehsaniara/joblet/releases/download/${{ steps.version.outputs.VERSION }}/rnx-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz | tar xz
            sudo mv rnx-linux-amd64 /usr/local/bin/rnx
            
            # ARM64 (Raspberry Pi 4, Pine64, etc.)
            curl -L https://github.com/ehsaniara/joblet/releases/download/${{ steps.version.outputs.VERSION }}/rnx-${{ steps.version.outputs.VERSION }}-linux-arm64.tar.gz | tar xz
            sudo mv rnx-linux-arm64 /usr/local/bin/rnx
            
            # i386 (older 32-bit systems)
            curl -L https://github.com/ehsaniara/joblet/releases/download/${{ steps.version.outputs.VERSION }}/rnx-${{ steps.version.outputs.VERSION }}-linux-386.tar.gz | tar xz
            sudo mv rnx-linux-386 /usr/local/bin/rnx
            ```
            
            ### üòà FreeBSD
            ```bash
            # AMD64
            curl -L https://github.com/ehsaniara/joblet/releases/download/${{ steps.version.outputs.VERSION }}/rnx-${{ steps.version.outputs.VERSION }}-freebsd-amd64.tar.gz | tar xz
            sudo mv rnx-freebsd-amd64 /usr/local/bin/rnx
            ```
            
            ## üéØ Platform Support Matrix
            
            | Platform | Architecture | Binary | Package |
            |----------|-------------|---------|---------|
            | **macOS** | Intel (x64) | ‚úÖ rnx-darwin-amd64 | ‚úÖ Universal installer |
            | **macOS** | Apple Silicon (ARM64) | ‚úÖ rnx-darwin-arm64 | ‚úÖ Universal installer |
            | **Windows** | AMD64 (x64) | ‚úÖ rnx-windows-amd64.exe | ‚úÖ ZIP |
            | **Windows** | ARM64 | ‚úÖ rnx-windows-arm64.exe | ‚úÖ ZIP |
            | **Windows** | i386 (32-bit) | ‚úÖ rnx-windows-386.exe | ‚úÖ ZIP |
            | **Linux Desktop** | AMD64 (x64) | ‚úÖ rnx-linux-amd64 | ‚úÖ TAR.GZ |
            | **Linux Desktop** | ARM64 | ‚úÖ rnx-linux-arm64 | ‚úÖ TAR.GZ |
            | **Linux Desktop** | i386 (32-bit) | ‚úÖ rnx-linux-386 | ‚úÖ TAR.GZ |
            | **FreeBSD** | AMD64 (x64) | ‚úÖ rnx-freebsd-amd64 | ‚úÖ TAR.GZ |
            | **FreeBSD** | ARM64 | ‚úÖ rnx-freebsd-arm64 | ‚úÖ TAR.GZ |
            
            ## üîß Usage
            
            ```bash
            # Connect to a Joblet server
            rnx --config rnx-config.yml list
            
            # Run a job
            rnx run echo "Hello from $(hostname)"
            
            # Run with resource limits
            rnx run --max-cpu=50 --max-memory=512 python3 script.py
            
            # Stream job logs
            rnx log <job-id>
            
            # Stop a job
            rnx stop <job-id>
            ```
            
            ## üìã What's Next?
            
            **For Linux Server Deployment:** Check out the comprehensive Linux packages (`.deb` and `.rpm`) that include both the Joblet daemon and RNX CLI in our [server deployment releases](https://github.com/ehsaniara/joblet/releases).
            
            **Need Help?** See the [documentation](https://github.com/ehsaniara/joblet#readme) or run `rnx --help`.
            
            ## üîê Verification
            
            ```bash
            # Verify checksums
            curl -L https://github.com/ehsaniara/joblet/releases/download/${{ steps.version.outputs.VERSION }}/rnx-checksums.txt
            sha256sum -c rnx-checksums.txt
            ```
          generate_release_notes: false
          draft: false
          prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
          tag_name: ${{ steps.version.outputs.VERSION }}
          make_latest: true