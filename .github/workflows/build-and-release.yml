name: Build and Release Joblet

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  security-events: write
  actions: read

env:
  GO_VERSION: '1.24'
  PACKAGE_NAME: 'joblet'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Run linting
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  build-binary:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ amd64, arm64 ]
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Determine version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(git describe --tags --always --dirty)-$(git rev-parse --short HEAD)
          fi
          
          # Clean version for package formats
          CLEAN_VERSION=$(echo "$VERSION" | sed 's/^v//' | sed 's/-[0-9]\+-g[a-f0-9]\+.*//' | sed 's/-[a-f0-9]\+$//')
          
          # Ensure version starts with digit
          if [[ ! "$CLEAN_VERSION" =~ ^[0-9] ]]; then
            CLEAN_VERSION="1.0.0"
          fi
          
          echo "version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
          echo "raw_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $CLEAN_VERSION (from $VERSION)"

      - name: Build joblet binary
        run: |
          GOOS=linux GOARCH=${{ matrix.arch }} CGO_ENABLED=0 go build \
            -ldflags "-X main.version=${{ steps.version.outputs.version }} -w -s" \
            -o joblet-${{ matrix.arch }} \
            ./cmd/joblet

      - name: Build RNX CLI binary
        run: |
          GOOS=linux GOARCH=${{ matrix.arch }} CGO_ENABLED=0 go build \
            -ldflags "-X main.version=${{ steps.version.outputs.version }} -w -s" \
            -o rnx-${{ matrix.arch }} \
            ./cmd/rnx

      - name: Upload joblet binary
        uses: actions/upload-artifact@v4
        with:
          name: joblet-binary-${{ matrix.arch }}
          path: joblet-${{ matrix.arch }}

      - name: Upload RNX CLI binary
        uses: actions/upload-artifact@v4
        with:
          name: rnx-binary-${{ matrix.arch }}
          path: rnx-${{ matrix.arch }}

  build-cross-platform-cli:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Get version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            TAG_VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(git describe --tags --always --dirty)-$(git rev-parse --short HEAD)
            TAG_VERSION="v${VERSION}"
          fi
          
          # Clean version for package formats
          CLEAN_VERSION=$(echo "$VERSION" | sed 's/^v//' | sed 's/-[0-9]\+-g[a-f0-9]\+.*//' | sed 's/-[a-f0-9]\+$//')
          
          # Ensure version starts with digit
          if [[ ! "$CLEAN_VERSION" =~ ^[0-9] ]]; then
            CLEAN_VERSION="1.0.0"
          fi
          
          echo "version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
          echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT

      - name: Build cross-platform RNX CLI
        run: |
          echo "🚀 Building RNX CLI for all platforms..."
          mkdir -p cli-dist
          
          # Linux (Desktop/Client usage)
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.tag_version }} -w -s" -o cli-dist/rnx-linux-amd64 ./cmd/rnx
          GOOS=linux GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.version.outputs.tag_version }} -w -s" -o cli-dist/rnx-linux-arm64 ./cmd/rnx
          GOOS=linux GOARCH=386 go build -ldflags "-X main.version=${{ steps.version.outputs.tag_version }} -w -s" -o cli-dist/rnx-linux-386 ./cmd/rnx
          
          # macOS (Intel and Apple Silicon)
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.tag_version }} -w -s" -o cli-dist/rnx-darwin-amd64 ./cmd/rnx
          GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.version.outputs.tag_version }} -w -s" -o cli-dist/rnx-darwin-arm64 ./cmd/rnx
          
          # Windows
          GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.tag_version }} -w -s" -o cli-dist/rnx-windows-amd64.exe ./cmd/rnx
          GOOS=windows GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.version.outputs.tag_version }} -w -s" -o cli-dist/rnx-windows-arm64.exe ./cmd/rnx
          GOOS=windows GOARCH=386 go build -ldflags "-X main.version=${{ steps.version.outputs.tag_version }} -w -s" -o cli-dist/rnx-windows-386.exe ./cmd/rnx
          
          # FreeBSD
          GOOS=freebsd GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.tag_version }} -w -s" -o cli-dist/rnx-freebsd-amd64 ./cmd/rnx
          GOOS=freebsd GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.version.outputs.tag_version }} -w -s" -o cli-dist/rnx-freebsd-arm64 ./cmd/rnx

      - name: Create cross-platform archives
        run: |
          cd cli-dist
          
          # Create archives
          tar -czf rnx-${{ steps.version.outputs.tag_version }}-linux-amd64.tar.gz rnx-linux-amd64
          tar -czf rnx-${{ steps.version.outputs.tag_version }}-linux-arm64.tar.gz rnx-linux-arm64
          tar -czf rnx-${{ steps.version.outputs.tag_version }}-linux-386.tar.gz rnx-linux-386
          tar -czf rnx-${{ steps.version.outputs.tag_version }}-darwin-amd64.tar.gz rnx-darwin-amd64
          tar -czf rnx-${{ steps.version.outputs.tag_version }}-darwin-arm64.tar.gz rnx-darwin-arm64
          
          # Universal macOS archive
          mkdir -p universal-macos
          cp rnx-darwin-amd64 universal-macos/rnx-intel
          cp rnx-darwin-arm64 universal-macos/rnx-apple-silicon
          cat > universal-macos/install.sh << 'EOF'
          #!/bin/bash
          # Universal macOS installer for RNX CLI
          ARCH=$(uname -m)
          if [ "$ARCH" = "arm64" ]; then
              echo "Installing RNX for Apple Silicon (M1/M2/M3)..."
              cp rnx-apple-silicon /usr/local/bin/rnx
          else
              echo "Installing RNX for Intel..."
              cp rnx-intel /usr/local/bin/rnx
          fi
          chmod +x /usr/local/bin/rnx
          echo "✅ RNX CLI installed successfully!"
          echo "Usage: rnx --help"
          EOF
          chmod +x universal-macos/install.sh
          tar -czf rnx-${{ steps.version.outputs.tag_version }}-darwin-universal.tar.gz -C universal-macos .
          
          # Windows archives
          zip rnx-${{ steps.version.outputs.tag_version }}-windows-amd64.zip rnx-windows-amd64.exe
          zip rnx-${{ steps.version.outputs.tag_version }}-windows-arm64.zip rnx-windows-arm64.exe
          zip rnx-${{ steps.version.outputs.tag_version }}-windows-386.zip rnx-windows-386.exe
          
          # FreeBSD archives
          tar -czf rnx-${{ steps.version.outputs.tag_version }}-freebsd-amd64.tar.gz rnx-freebsd-amd64
          tar -czf rnx-${{ steps.version.outputs.tag_version }}-freebsd-arm64.tar.gz rnx-freebsd-arm64
          
          # Generate checksums for CLI
          sha256sum *.tar.gz *.zip > rnx-cli-checksums.txt

      - name: Upload cross-platform CLI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cross-platform-cli
          path: cli-dist/*

  build-deb-package-amd64:
    needs: [ test, build-binary ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download joblet binary
        uses: actions/download-artifact@v4
        with:
          name: joblet-binary-amd64
          path: ./

      - name: Download RNX CLI binary
        uses: actions/download-artifact@v4
        with:
          name: rnx-binary-amd64
          path: ./

      - name: Make binaries executable
        run: |
          chmod +x joblet-amd64
          chmod +x rnx-amd64
          mv joblet-amd64 joblet
          mv rnx-amd64 rnx

      - name: Install packaging dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev build-essential devscripts

      - name: Set version from previous job
        run: |
          echo "VERSION=${{ needs.build-binary.outputs.version }}" >> $GITHUB_ENV

      - name: Make scripts executable
        run: |
          chmod +x scripts/build-deb.sh

      - name: Create Debian package (amd64)
        run: |
          ./scripts/build-deb.sh amd64 ${{ env.VERSION }}

      - name: Upload Debian package (amd64)
        uses: actions/upload-artifact@v4
        with:
          name: debian-package-amd64
          path: "*.deb"

  build-deb-package-arm64:
    needs: [ test, build-binary ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download joblet binary
        uses: actions/download-artifact@v4
        with:
          name: joblet-binary-arm64
          path: ./

      - name: Download RNX CLI binary
        uses: actions/download-artifact@v4
        with:
          name: rnx-binary-arm64
          path: ./

      - name: Make binaries executable
        run: |
          chmod +x joblet-arm64
          chmod +x rnx-arm64
          mv joblet-arm64 joblet
          mv rnx-arm64 rnx

      - name: Install packaging dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev build-essential devscripts

      - name: Set version from previous job
        run: |
          echo "VERSION=${{ needs.build-binary.outputs.version }}" >> $GITHUB_ENV

      - name: Make scripts executable
        run: |
          chmod +x scripts/build-deb.sh

      - name: Create Debian package (arm64)
        run: |
          ./scripts/build-deb.sh arm64 ${{ env.VERSION }}

      - name: Upload Debian package (arm64)
        uses: actions/upload-artifact@v4
        with:
          name: debian-package-arm64
          path: "*.deb"

  build-rpm-package-x86_64:
    needs: [ test, build-binary ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download joblet binary
        uses: actions/download-artifact@v4
        with:
          name: joblet-binary-amd64
          path: ./

      - name: Download RNX CLI binary
        uses: actions/download-artifact@v4
        with:
          name: rnx-binary-amd64
          path: ./

      - name: Make binaries executable
        run: |
          chmod +x joblet-amd64
          chmod +x rnx-amd64
          mv joblet-amd64 joblet
          mv rnx-amd64 rnx

      - name: Install RPM build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm build-essential

      - name: Set version from previous job
        run: |
          echo "VERSION=${{ needs.build-binary.outputs.version }}" >> $GITHUB_ENV

      - name: Make scripts executable
        run: |
          chmod +x scripts/build-rpm.sh

      - name: Build RPM package (x86_64)
        run: |
          ./scripts/build-rpm.sh x86_64 ${{ env.VERSION }}

      - name: Upload RPM package (x86_64)
        uses: actions/upload-artifact@v4
        with:
          name: rpm-package-x86_64
          path: "*.rpm"

  build-rpm-package-aarch64:
    needs: [ test, build-binary ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download joblet binary
        uses: actions/download-artifact@v4
        with:
          name: joblet-binary-arm64
          path: ./

      - name: Download RNX CLI binary
        uses: actions/download-artifact@v4
        with:
          name: rnx-binary-arm64
          path: ./

      - name: Make binaries executable
        run: |
          chmod +x joblet-arm64
          chmod +x rnx-arm64
          mv joblet-arm64 joblet
          mv rnx-arm64 rnx

      - name: Install RPM build tools with enhanced cross-compilation support
        run: |
          sudo apt-get update
          
          # Install core RPM build tools
          sudo apt-get install -y rpm build-essential
          
          # Install QEMU for emulation support (helps with architecture detection)
          sudo apt-get install -y qemu-user-static
          
          # Add architecture support for cross-compilation
          sudo dpkg --add-architecture arm64
          
          # Install cross-compilation tools if available
          sudo apt-get install -y gcc-aarch64-linux-gnu || echo "Cross-compilation tools not available, proceeding with binary packaging"
          
          # Configure binfmt to handle aarch64 binaries (helps RPM understand the architecture)
          sudo update-binfmts --display || echo "binfmt configuration not available"

      - name: Set version from previous job
        run: |
          echo "VERSION=${{ needs.build-binary.outputs.version }}" >> $GITHUB_ENV

      - name: Make scripts executable
        run: |
          chmod +x scripts/build-rpm.sh

      - name: Build RPM package (aarch64) with enhanced cross-compilation
        run: |
          # Use aarch64 explicitly (not arm64) for RPM builds
          ./scripts/build-rpm.sh aarch64 ${{ env.VERSION }}

      - name: Upload RPM package (aarch64)
        uses: actions/upload-artifact@v4
        with:
          name: rpm-package-aarch64
          path: "*.rpm"

  test-debian-package-amd64:
    needs: build-deb-package-amd64
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - name: Download Debian package (amd64)
        uses: actions/download-artifact@v4
        with:
          name: debian-package-amd64
          path: ./

      - name: Test Debian package metadata (amd64)
        run: |
          # Check package info
          dpkg-deb -I *.deb
          
          # List package contents
          dpkg-deb -c *.deb
          
          # Test dependencies
          dpkg-deb --field *.deb Depends
          
          # Verify architecture
          dpkg-deb --field *.deb Architecture
          
          # Check if this is the native architecture (can test installation)
          PACKAGE_ARCH=$(dpkg-deb --field *.deb Architecture)
          SYSTEM_ARCH=$(dpkg --print-architecture)
          echo "Package architecture: $PACKAGE_ARCH"
          echo "System architecture: $SYSTEM_ARCH"
          
          if [ "$PACKAGE_ARCH" = "$SYSTEM_ARCH" ]; then
            echo "Testing installation (native architecture)..."
            sudo dpkg --dry-run -i *.deb
          else
            echo "Skipping installation test (cross-architecture)"
          fi

  test-debian-package-arm64:
    needs: build-deb-package-arm64
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - name: Download Debian package (arm64)
        uses: actions/download-artifact@v4
        with:
          name: debian-package-arm64
          path: ./

      - name: Test Debian package metadata (arm64)
        run: |
          # Check package info
          dpkg-deb -I *.deb
          
          # List package contents
          dpkg-deb -c *.deb
          
          # Test dependencies
          dpkg-deb --field *.deb Depends
          
          # Verify architecture
          PACKAGE_ARCH=$(dpkg-deb --field *.deb Architecture)
          echo "Package architecture: $PACKAGE_ARCH"
          
          # Verify it's arm64
          if [ "$PACKAGE_ARCH" = "arm64" ]; then
            echo "✓ Package correctly built for arm64"
          else
            echo "✗ Expected arm64, got $PACKAGE_ARCH"
            exit 1
          fi
          
          echo "Skipping installation test (cross-architecture)"

  test-rpm-package-x86_64:
    needs: build-rpm-package-x86_64
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - name: Install RPM tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm

      - name: Download RPM package (x86_64)
        uses: actions/download-artifact@v4
        with:
          name: rpm-package-x86_64
          path: ./

      - name: Test RPM package (x86_64)
        run: |
          # Test RPM package validity
          rpm -qip *.rpm
          
          # List package contents
          rpm -qlp *.rpm
          
          # Test package dependencies
          rpm -qpR *.rpm
          
          # Test installation (dry run equivalent)
          rpm --test -i *.rpm || echo "RPM validation completed"
          
          # Verify architecture
          rpm -qp --queryformat '%{ARCH}\n' *.rpm

  test-rpm-package-aarch64:
    needs: build-rpm-package-aarch64
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - name: Install RPM tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm

      - name: Download RPM package (aarch64)
        uses: actions/download-artifact@v4
        with:
          name: rpm-package-aarch64
          path: ./

      - name: Test RPM package (aarch64)
        run: |
          # Test RPM package validity
          rpm -qip *.rpm
          
          # List package contents
          rpm -qlp *.rpm
          
          # Test package dependencies
          rpm -qpR *.rpm
          
          # Test installation (dry run equivalent)
          rpm --test -i *.rpm || echo "RPM validation completed"
          
          # Verify architecture
          rpm -qp --queryformat '%{ARCH}\n' *.rpm

  security-scan-debian-amd64:
    needs: build-deb-package-amd64
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Debian package (amd64)
        uses: actions/download-artifact@v4
        with:
          name: debian-package-amd64
          path: ./packages/

      - name: Security scan Debian amd64 with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './packages'
          format: 'sarif'
          output: 'trivy-results-debian-amd64.sarif'

      - name: Upload Trivy scan results (Debian amd64)
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-debian-amd64.sarif'
          category: 'debian-amd64'

  security-scan-debian-arm64:
    needs: build-deb-package-arm64
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Debian package (arm64)
        uses: actions/download-artifact@v4
        with:
          name: debian-package-arm64
          path: ./packages/

      - name: Security scan Debian arm64 with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './packages'
          format: 'sarif'
          output: 'trivy-results-debian-arm64.sarif'

      - name: Upload Trivy scan results (Debian arm64)
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-debian-arm64.sarif'
          category: 'debian-arm64'

  security-scan-rpm-x86_64:
    needs: build-rpm-package-x86_64
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download RPM package (x86_64)
        uses: actions/download-artifact@v4
        with:
          name: rpm-package-x86_64
          path: ./packages/

      - name: Security scan RPM x86_64 with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './packages'
          format: 'sarif'
          output: 'trivy-results-rpm-x86_64.sarif'

      - name: Upload Trivy scan results (RPM x86_64)
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-rpm-x86_64.sarif'
          category: 'rpm-x86_64'

  security-scan-rpm-aarch64:
    needs: build-rpm-package-aarch64
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download RPM package (aarch64)
        uses: actions/download-artifact@v4
        with:
          name: rpm-package-aarch64
          path: ./packages/

      - name: Security scan RPM aarch64 with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './packages'
          format: 'sarif'
          output: 'trivy-results-rpm-aarch64.sarif'

      - name: Upload Trivy scan results (RPM aarch64)
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-rpm-aarch64.sarif'
          category: 'rpm-aarch64'

  release:
    needs: [
      build-deb-package-amd64,
      build-deb-package-arm64,
      build-rpm-package-x86_64,
      build-rpm-package-aarch64,
      test-debian-package-amd64,
      test-debian-package-arm64,
      test-rpm-package-x86_64,
      test-rpm-package-aarch64,
      security-scan-debian-amd64,
      security-scan-debian-arm64,
      security-scan-rpm-x86_64,
      security-scan-rpm-aarch64,
      build-cross-platform-cli,
      build-binary
    ]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      - name: Download all packages
        uses: actions/download-artifact@v4
        with:
          path: packages/

      - name: Organize release artifacts
        run: |
          mkdir -p release/
          
          # Server packages (.deb and .rpm)
          find packages/ -name "*.deb" -exec cp {} release/ \;
          find packages/ -name "*.rpm" -exec cp {} release/ \;
          
          # Cross-platform CLI archives
          find packages/cross-platform-cli -name "*.tar.gz" -exec cp {} release/ \;
          find packages/cross-platform-cli -name "*.zip" -exec cp {} release/ \;
          find packages/cross-platform-cli -name "*-checksums.txt" -exec cp {} release/ \;
          
          # Generate comprehensive checksums
          cd release/
          sha256sum *.deb *.rpm *.tar.gz *.zip > joblet-complete-checksums.txt
          
          echo "📦 Release contents:"
          ls -la

      - name: Create comprehensive release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: "Joblet ${{ github.ref_name }}"
          files: |
            release/*.deb
            release/*.rpm
            release/*.tar.gz
            release/*.zip
            release/*-checksums.txt
          body: |
            # 🚀 Joblet ${{ github.ref_name }} - Complete Release
            
            **Complete Joblet release** with both Linux server packages and cross-platform RNX CLI.
            
            ---
            
            ## 🖥️ Linux Server Installation (Full Joblet + RNX)
            
            Choose your Linux distribution and architecture:
            
            ### 📋 Debian/Ubuntu (.deb packages)
            ```bash
            # AMD64 servers (Intel/AMD)
            wget https://github.com/ehsaniara/joblet/releases/download/${{ github.ref_name }}/joblet_${{ needs.build-binary.outputs.version }}_amd64.deb
            sudo dpkg -i joblet_${{ needs.build-binary.outputs.version }}_amd64.deb
            
            # ARM64 servers (AWS Graviton, ARM servers)
            wget https://github.com/ehsaniara/joblet/releases/download/${{ github.ref_name }}/joblet_${{ needs.build-binary.outputs.version }}_arm64.deb
            sudo dpkg -i joblet_${{ needs.build-binary.outputs.version }}_arm64.deb
            
            # Start the service
            sudo systemctl start joblet && sudo systemctl enable joblet
            ```
            
            ### 🔴 RHEL/CentOS/Fedora/Amazon Linux (.rpm packages)
            ```bash
            # x86_64 servers (Intel/AMD)
            wget https://github.com/ehsaniara/joblet/releases/download/${{ github.ref_name }}/joblet-${{ needs.build-binary.outputs.version }}-1.x86_64.rpm
            
            # aarch64 servers (AWS Graviton, ARM servers)
            wget https://github.com/ehsaniara/joblet/releases/download/${{ github.ref_name }}/joblet-${{ needs.build-binary.outputs.version }}-1.aarch64.rpm
            
            # Install based on your distribution:
            sudo yum localinstall -y joblet-*.rpm     # Amazon Linux 2
            sudo dnf localinstall -y joblet-*.rpm     # Amazon Linux 2023/Fedora
            sudo rpm -ivh joblet-*.rpm                # RHEL/CentOS
            
            # Start the service
            sudo systemctl start joblet && sudo systemctl enable joblet
            ```
            
            ---
            
            ## 📱 RNX CLI Installation (Desktop/Laptop Client)
            
            Install the RNX CLI on your desktop/laptop to connect to Joblet servers:
            
            ### 🍎 macOS
            ```bash
            # Intel Macs
            curl -L https://github.com/ehsaniara/joblet/releases/download/${{ github.ref_name }}/rnx-${{ github.ref_name }}-darwin-amd64.tar.gz | tar xz
            sudo mv rnx-darwin-amd64 /usr/local/bin/rnx
            
            # Apple Silicon (M1/M2/M3/M4)
            curl -L https://github.com/ehsaniara/joblet/releases/download/${{ github.ref_name }}/rnx-${{ github.ref_name }}-darwin-arm64.tar.gz | tar xz
            sudo mv rnx-darwin-arm64 /usr/local/bin/rnx
            
            # Universal installer (auto-detects architecture)
            curl -L https://github.com/ehsaniara/joblet/releases/download/${{ github.ref_name }}/rnx-${{ github.ref_name }}-darwin-universal.tar.gz | tar xz
            sudo bash install.sh
            ```
            
            ### 🪟 Windows
            ```powershell
            # AMD64 (Intel/AMD)
            Invoke-WebRequest -Uri "https://github.com/ehsaniara/joblet/releases/download/${{ github.ref_name }}/rnx-${{ github.ref_name }}-windows-amd64.zip" -OutFile "rnx.zip"
            Expand-Archive rnx.zip
            Move-Item rnx\rnx-windows-amd64.exe "C:\Program Files\rnx.exe"
            
            # ARM64 (Surface Pro X, other ARM Windows)
            Invoke-WebRequest -Uri "https://github.com/ehsaniara/joblet/releases/download/${{ github.ref_name }}/rnx-${{ github.ref_name }}-windows-arm64.zip" -OutFile "rnx.zip"
            ```
            
            ### 🐧 Linux Desktop
            ```bash
            # AMD64 (Intel/AMD)
            curl -L https://github.com/ehsaniara/joblet/releases/download/${{ github.ref_name }}/rnx-${{ github.ref_name }}-linux-amd64.tar.gz | tar xz
            sudo mv rnx-linux-amd64 /usr/local/bin/rnx
            
            # ARM64 (Raspberry Pi 4, Pine64, etc.)
            curl -L https://github.com/ehsaniara/joblet/releases/download/${{ github.ref_name }}/rnx-${{ github.ref_name }}-linux-arm64.tar.gz | tar xz
            sudo mv rnx-linux-arm64 /usr/local/bin/rnx
            
            # i386 (older 32-bit systems)
            curl -L https://github.com/ehsaniara/joblet/releases/download/${{ github.ref_name }}/rnx-${{ github.ref_name }}-linux-386.tar.gz | tar xz
            sudo mv rnx-linux-386 /usr/local/bin/rnx
            ```
            
            ### 😈 FreeBSD
            ```bash
            # AMD64
            curl -L https://github.com/ehsaniara/joblet/releases/download/${{ github.ref_name }}/rnx-${{ github.ref_name }}-freebsd-amd64.tar.gz | tar xz
            sudo mv rnx-freebsd-amd64 /usr/local/bin/rnx
            ```
            
            ---
            
            ## 🎯 What You Get
            
            | Component | Purpose | Platforms |
            |-----------|---------|-----------|
            | **Server Packages** | Deploy Joblet daemon | Linux servers (.deb/.rpm) |
            | **RNX CLI** | Connect to servers | macOS, Windows, Linux, FreeBSD |
            
            ### 🖥️ Server Packages Include:
            - ✅ **Joblet daemon** - Main server process
            - ✅ **RNX CLI** - Command-line client  
            - ✅ **Embedded certificates** - Automatic mTLS setup
            - ✅ **Systemd service** - Auto-start configuration
            - ✅ **Certificate generator** - Easy certificate management
            
            ### 📱 Cross-Platform RNX CLI:
            - ✅ **macOS** (Intel + Apple Silicon + Universal)
            - ✅ **Windows** (AMD64 + ARM64 + i386)
            - ✅ **Linux Desktop** (AMD64 + ARM64 + i386)
            - ✅ **FreeBSD** (AMD64 + ARM64)
            
            ---
            
            ## 🚀 Quick Start
            
            ```bash
            # 1. Install server package on your Linux server (see above)
            # 2. Install RNX CLI on your desktop/laptop (see above)
            # 3. Copy client configuration from server
            scp your-server:/opt/joblet/config/rnx-config.yml ~/.rnx/
            
            # 4. Test connection and run jobs
            rnx list
            rnx run echo "Hello from Joblet!"
            rnx run --max-cpu=50 --max-memory=512 python3 script.py
            rnx log <job-id>
            ```
            
            ## 🔐 Package Verification
            
            ```bash
            # Verify all checksums
            curl -L https://github.com/ehsaniara/joblet/releases/download/${{ github.ref_name }}/joblet-complete-checksums.txt
            sha256sum -c joblet-complete-checksums.txt
            ```
            
            ---
            
            ## 📊 Architecture Support Matrix
            
            | Package Type | AMD64/x86_64 | ARM64/aarch64 | i386 |
            |-------------|--------------|---------------|------|
            | **Debian (.deb)** | ✅ | ✅ | ❌ |
            | **RPM (.rpm)** | ✅ | ✅ | ❌ |
            | **RNX CLI** | ✅ | ✅ | ✅ |
            
            Perfect for modern cloud environments including **AWS Graviton**, **Azure ARM**, and traditional **Intel/AMD** servers.
          generate_release_notes: false
          draft: false
          prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
          make_latest: true