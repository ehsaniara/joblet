name: Build and Release Joblet

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  security-events: write
  actions: read

env:
  GO_VERSION: '1.24'
  PACKAGE_NAME: 'joblet'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Run linting
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  build-binary:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ amd64, arm64 ]
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Determine version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(git describe --tags --always --dirty)-$(git rev-parse --short HEAD)
          fi
          
          # Clean version for Debian package format (remove git commit info)
          CLEAN_VERSION=$(echo "$VERSION" | sed 's/^v//' | sed 's/-[0-9]\+-g[a-f0-9]\+.*//' | sed 's/-[a-f0-9]\+$//')
          
          # Ensure version starts with digit
          if [[ ! "$CLEAN_VERSION" =~ ^[0-9] ]]; then
            CLEAN_VERSION="1.0.0"
          fi
          
          echo "version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
          echo "raw_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $CLEAN_VERSION (from $VERSION)"

      - name: Build joblet binary
        run: |
          GOOS=linux GOARCH=${{ matrix.arch }} CGO_ENABLED=0 go build \
            -ldflags "-X main.version=${{ steps.version.outputs.version }} -w -s" \
            -o joblet-${{ matrix.arch }} \
            ./cmd/joblet

      - name: Build RNX CLI binary
        run: |
          GOOS=linux GOARCH=${{ matrix.arch }} CGO_ENABLED=0 go build \
            -ldflags "-X main.version=${{ steps.version.outputs.version }} -w -s" \
            -o rnx-${{ matrix.arch }} \
            ./cmd/rnx

      - name: Upload joblet binary
        uses: actions/upload-artifact@v4
        with:
          name: joblet-binary-${{ matrix.arch }}
          path: joblet-${{ matrix.arch }}

      - name: Upload RNX CLI binary
        uses: actions/upload-artifact@v4
        with:
          name: rnx-binary-${{ matrix.arch }}
          path: rnx-${{ matrix.arch }}

  build-deb-package:
    needs: [ test, build-binary ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ amd64, arm64 ]
    steps:
      - uses: actions/checkout@v4

      - name: Download joblet binary
        uses: actions/download-artifact@v4
        with:
          name: joblet-binary-${{ matrix.arch }}
          path: ./

      - name: Download RNX CLI binary
        uses: actions/download-artifact@v4
        with:
          name: rnx-binary-${{ matrix.arch }}
          path: ./

      - name: Make binaries executable
        run: |
          chmod +x joblet-${{ matrix.arch }}
          chmod +x rnx-${{ matrix.arch }}
          mv joblet-${{ matrix.arch }} joblet
          mv rnx-${{ matrix.arch }} rnx

      - name: Install packaging dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev build-essential devscripts

      - name: Set version from previous job
        run: |
          echo "VERSION=${{ needs.build-binary.outputs.version }}" >> $GITHUB_ENV

      - name: Create Debian package structure
        run: |
          chmod +x scripts/build-deb.sh
          ./scripts/build-deb.sh ${{ matrix.arch }} ${{ env.VERSION }}

      - name: Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: debian-package-${{ matrix.arch }}
          path: "*.deb"

      - name: Test package installation (amd64 only)
        if: matrix.arch == 'amd64'
        run: |
          # Test package can be installed (dry run)
          sudo dpkg --dry-run -i *.deb
          
          # Check package info
          dpkg-deb -I *.deb
          dpkg-deb -c *.deb

  security-scan:
    needs: build-deb-package
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Debian package (amd64)
        uses: actions/download-artifact@v4
        with:
          name: debian-package-amd64
          path: ./packages/

      - name: Security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './packages'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  release:
    needs: [ build-deb-package, security-scan ]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      - name: Download all packages
        uses: actions/download-artifact@v4
        with:
          path: packages/

      - name: Organize release artifacts
        run: |
          mkdir -p release/
          find packages/ -name "*.deb" -exec cp {} release/ \;
          ls -la release/

      - name: Generate checksums
        run: |
          cd release/
          sha256sum *.deb > checksums.txt
          cat checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/*.deb
            release/checksums.txt
          body: |
            ## Joblet ${{ github.ref_name }}
            
            üöÄ **Interactive Installation** - Automatically configures network settings during installation!
            
            ### Quick Installation
            ```bash
            # Download the appropriate package for your architecture
            wget https://github.com/ehsaniara/joblet/releases/download/${{ github.ref_name }}/joblet_${{ needs.build-binary.outputs.version }}_amd64.deb
            
            # Interactive installation (recommended)
            sudo dpkg -i joblet_${{ needs.build-binary.outputs.version }}_amd64.deb
            
            # Start the service
            sudo systemctl start joblet
            sudo systemctl enable joblet
            ```
            
            ### Installation Options
            
            #### üñ•Ô∏è Interactive Mode (Default)
            ```bash
            sudo dpkg -i joblet_${{ needs.build-binary.outputs.version }}_amd64.deb
            ```
            Prompts for server IP address - the IP that clients will use to connect.
            
            #### ü§ñ Automated Mode
            ```bash
            # Pre-configured installation
            JOBLET_SERVER_IP="192.168.1.100" \
            sudo -E dpkg -i joblet_${{ needs.build-binary.outputs.version }}_amd64.deb
            ```
            
            #### üîß CI/CD Mode
            ```bash
            # Non-interactive installation (uses auto-detected IP)
            DEBIAN_FRONTEND=noninteractive sudo dpkg -i joblet_${{ needs.build-binary.outputs.version }}_amd64.deb
            ```
            
            ### Common Examples
            
            **Local Network:**
            ```bash
            JOBLET_SERVER_IP="192.168.1.100" \
            sudo -E dpkg -i joblet_${{ needs.build-binary.outputs.version }}_amd64.deb
            ```
            
            **Public IP:**
            ```bash
            JOBLET_SERVER_IP="203.0.113.100" \
            sudo -E dpkg -i joblet_${{ needs.build-binary.outputs.version }}_amd64.deb
            ```
            
            **Auto-detected (Default):**
            ```bash
            # Uses the IP from your primary network interface
            sudo dpkg -i joblet_${{ needs.build-binary.outputs.version }}_amd64.deb
            ```
            
            ### Post-Installation
            
            #### Verification
            ```bash
            # Verify checksums
            sha256sum -c checksums.txt
            
            # Check service status
            sudo systemctl status joblet
            
            # Test CLI connection
            rnx list
            ```
            
            #### Reconfiguration
            ```bash
            # Reconfigure network settings
            sudo dpkg-reconfigure joblet
            
            # Or manually edit config and regenerate certificates
            sudo nano /opt/joblet/config/config.yml
            sudo systemctl restart joblet
            ```
            
            ### What's New
            - Interactive installation asks for server IP address
            - Automatic certificate generation for the specified IP
            - Simplified configuration - just one IP address needed
            - Enhanced user experience with clear prompts
            - Support for both interactive and automated installation
            
            ### CLI Usage (RNX)
                        
            ```bash
            # Basic commands
            rnx list                              # List all jobs
            rnx run echo "Hello World"            # Run a simple command
            rnx run --max-memory=512 python3 script.py  # Run with resource limits
            rnx status <job-id>                   # Get job status
            rnx log <job-id>                      # Stream job logs
            rnx stop <job-id>                     # Stop a job
            
            # Remote connections
            rnx --server=remote:50051 run pytest   # Connect to remote server
            rnx --node=production run deploy.sh    # Use specific configuration
            ```
            
            ### Documentation
            - Installation Guide: See release notes above
            - Configuration: `/opt/joblet/config/server-config.yml`
            - Client Configuration: `/opt/joblet/config/client-config.yml` (for remote use)
            - Certificates: Embedded in configuration files
            - Logs: `sudo journalctl -u joblet -f`
            - CLI Help: `rnx --help`

          draft: false
          prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}