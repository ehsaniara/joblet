#!/bin/bash
set -e

# Source debconf library
. /usr/share/debconf/confmodule

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Function to detect current IP (fallback)
detect_current_ip() {
    local current_ip=$(ip route get 1.1.1.1 2>/dev/null | grep -oP 'src \K[0-9.]+' | head -1)
    if [ -z "$current_ip" ]; then
        current_ip=$(ip -4 addr show | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | grep -v '127.0.0.1' | head -1)
    fi
    echo "${current_ip:-127.0.0.1}"
}

# Function to get configuration from debconf or environment or config file
get_configuration() {
    # First try loading from config file (if exists from previous install)
    if [ -f "/tmp/joblet-install-config" ]; then
        print_info "Loading configuration from installation..."
        source /tmp/joblet-install-config
    fi

    # Environment variables override (for automated installation)
    if [ -n "$JOBLET_SERVER_IP" ]; then
        # Legacy environment variable support
        JOBLET_GRPC_SERVER_IP="$JOBLET_SERVER_IP"
        JOBLET_CERT_PRIMARY_IP="$JOBLET_SERVER_IP"
        print_info "Using legacy environment variable JOBLET_SERVER_IP"
    fi

    # Try debconf if not set from config file
    if [ -z "$JOBLET_GRPC_SERVER_IP" ] && command -v db_get >/dev/null 2>&1; then
        db_get joblet/grpc_server_ip || true
        JOBLET_GRPC_SERVER_IP="$RET"

        db_get joblet/grpc_server_port || true
        JOBLET_GRPC_SERVER_PORT="$RET"

        db_get joblet/cert_primary_ip || true
        JOBLET_CERT_PRIMARY_IP="$RET"

        db_get joblet/cert_public_ip || true
        CERT_PUBLIC_IP="$RET"

        db_get joblet/cert_domain || true
        CERT_DOMAIN="$RET"

        # Build additional names from debconf
        JOBLET_CERT_ADDITIONAL_NAMES=""
        if [ -n "$CERT_PUBLIC_IP" ]; then
            JOBLET_CERT_ADDITIONAL_NAMES="$CERT_PUBLIC_IP"
        fi
        if [ -n "$CERT_DOMAIN" ]; then
            if [ -n "$JOBLET_CERT_ADDITIONAL_NAMES" ]; then
                JOBLET_CERT_ADDITIONAL_NAMES="$JOBLET_CERT_ADDITIONAL_NAMES,$CERT_DOMAIN"
            else
                JOBLET_CERT_ADDITIONAL_NAMES="$CERT_DOMAIN"
            fi
        fi
    fi

    # Apply defaults for any missing values
    DETECTED_IP=$(detect_current_ip)
    JOBLET_GRPC_SERVER_IP=${JOBLET_GRPC_SERVER_IP:-"0.0.0.0"}
    JOBLET_GRPC_SERVER_PORT=${JOBLET_GRPC_SERVER_PORT:-50051}
    JOBLET_CERT_PRIMARY_IP=${JOBLET_CERT_PRIMARY_IP:-$DETECTED_IP}
    JOBLET_CERT_ADDITIONAL_NAMES=${JOBLET_CERT_ADDITIONAL_NAMES:-}

    # Set legacy compatibility variables
    JOBLET_SERVER_ADDRESS="$JOBLET_CERT_PRIMARY_IP"
    JOBLET_SERVER_PORT="$JOBLET_GRPC_SERVER_PORT"
    JOBLET_ADDITIONAL_NAMES="$JOBLET_CERT_ADDITIONAL_NAMES"
}

# Function to update joblet-config.yml with gRPC server settings
update_server_config() {
    local config_file="/opt/joblet/config/joblet-config.yml"

    print_info "Updating server configuration with gRPC settings..."

    # Create a temporary config update script
    cat > /tmp/update_server_config.sh << 'EOF'
#!/bin/bash
CONFIG_FILE="$1"
GRPC_IP="$2"
GRPC_PORT="$3"

# Check if config file exists
if [ ! -f "$CONFIG_FILE" ]; then
    echo "Error: Config file $CONFIG_FILE not found"
    exit 1
fi

# Use sed to update the server address and port
sed -i "s/address: \".*\"/address: \"$GRPC_IP\"/" "$CONFIG_FILE"
sed -i "s/port: .*/port: $GRPC_PORT/" "$CONFIG_FILE"

echo "Updated server configuration:"
echo "  address: $GRPC_IP"
echo "  port: $GRPC_PORT"
EOF

    chmod +x /tmp/update_server_config.sh
    /tmp/update_server_config.sh "$config_file" "$JOBLET_GRPC_SERVER_IP" "$JOBLET_GRPC_SERVER_PORT"
    rm -f /tmp/update_server_config.sh

    print_success "Server configuration updated successfully"
}

# Function to generate and embed certificates
generate_and_embed_certificates() {
    print_info "Generating certificates and embedding them in config files..."

    # Export variables for the certificate generation script
    export JOBLET_SERVER_ADDRESS="$JOBLET_CERT_PRIMARY_IP"
    export JOBLET_ADDITIONAL_NAMES="$JOBLET_CERT_ADDITIONAL_NAMES"
    export JOBLET_MODE="package-install"  # Special mode for package installation

    print_info "Certificate configuration:"
    echo "  Primary IP: $JOBLET_CERT_PRIMARY_IP"
    echo "  Additional names: ${JOBLET_CERT_ADDITIONAL_NAMES:-none}"

    # Ensure scripts directory exists and has correct permissions
    if [ -d "/opt/joblet/scripts" ]; then
        chmod 755 /opt/joblet/scripts
        chmod 644 /opt/joblet/scripts/*.yml 2>/dev/null || true
    fi

    # Run the embedded certificate generation script
    if [ -x /usr/local/bin/certs_gen_embedded.sh ]; then
        /usr/local/bin/certs_gen_embedded.sh
    else
        print_error "Certificate generation script not found or not executable"
        return 1
    fi

    print_success "Certificates generated and embedded successfully"
}

case "$1" in
    configure)
        print_info "🔧 Configuring Joblet Service with Embedded Certificates..."
        echo

        # Set basic permissions first
        chown -R root:root /opt/joblet
        chmod 755 /opt/joblet
        chmod 755 /opt/joblet/joblet
        chmod 755 /opt/joblet/rnx
        chmod 755 /opt/joblet/scripts
        chmod 644 /opt/joblet/scripts/joblet-config-template.yml
        chmod 644 /opt/joblet/scripts/rnx-config-template.yml
        chmod +x /usr/local/bin/certs_gen_embedded.sh

        # Create config directory
        mkdir -p /opt/joblet/config
        chmod 700 /opt/joblet/config  # Restricted since it will contain private keys

        # Create symlinks
        if [ ! -L /usr/bin/rnx ]; then
            ln -sf /opt/joblet/rnx /usr/bin/rnx
        fi

        # Get configuration from debconf/environment
        get_configuration

        print_info "Configuration Summary:"
        echo "  gRPC Server: $JOBLET_GRPC_SERVER_IP:$JOBLET_GRPC_SERVER_PORT"
        echo "  Certificate Primary IP: $JOBLET_CERT_PRIMARY_IP"
        echo "  Certificate Additional Names: ${JOBLET_CERT_ADDITIONAL_NAMES:-none}"
        echo

        # Generate certificates and embed them in config files
        generate_and_embed_certificates

        # Update the joblet-config.yml with gRPC server settings
        update_server_config

        # Set secure permissions on config files (they now contain private keys)
        chmod 600 /opt/joblet/config/joblet-config.yml  # Server config has private keys
        chmod 600 /opt/joblet/config/rnx-config.yml     # Client config has private keys

        # Create log directory
        mkdir -p /var/log/joblet
        chown root:root /var/log/joblet
        chmod 755 /var/log/joblet

        # Setup cgroup delegation
        if [ -d /sys/fs/cgroup ]; then
            print_info "Setting up cgroup delegation..."
            mkdir -p /sys/fs/cgroup/joblet.slice
            echo "+cpu +memory +io +pids" > /sys/fs/cgroup/joblet.slice/cgroup.subtree_control 2>/dev/null || true
        fi

        # Enable systemd service
        systemctl daemon-reload
        systemctl enable joblet.service

        # Clean up temporary config file
        rm -f /tmp/joblet-install-config

        echo
        print_success "Joblet service installed successfully with embedded certificates!"
        echo

        print_info "🚀 Service Configuration:"
        echo "  gRPC Server listening on: $JOBLET_GRPC_SERVER_IP:$JOBLET_GRPC_SERVER_PORT"
        echo "  SSL Certificate valid for: $JOBLET_CERT_PRIMARY_IP${JOBLET_CERT_ADDITIONAL_NAMES:+, $JOBLET_CERT_ADDITIONAL_NAMES}"
        echo

        print_info "📱 Remote CLI Setup:"
        echo "  Copy /opt/joblet/config/rnx-config.yml to remote machines"
        echo "  Remote usage: rnx --config=rnx-config.yml list"
        echo

        print_info "🔧 Next Steps:"
        echo "  sudo systemctl start joblet    # Start the service"
        echo "  rnx list                       # Test local connection"
        echo "  sudo journalctl -u joblet -f   # View service logs"
        ;;
esac

exit 0