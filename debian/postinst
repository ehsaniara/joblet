#!/bin/bash
set -e

# Source debconf library
. /usr/share/debconf/confmodule

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Function to detect current IP (fallback)
detect_current_ip() {
    local current_ip=$(ip route get 1.1.1.1 2>/dev/null | grep -oP 'src \K[0-9.]+' | head -1)
    if [ -z "$current_ip" ]; then
        current_ip=$(ip -4 addr show | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | grep -v '127.0.0.1' | head -1)
    fi
    echo "${current_ip:-127.0.0.1}"
}

# Function to get configuration from debconf or environment
get_configuration() {
    # First try debconf
    if [ -x /usr/bin/debconf-get ]; then
        db_get worker/server_address || true
        WORKER_SERVER_ADDRESS="$RET"

        db_get worker/server_port || true
        WORKER_SERVER_PORT="$RET"

        db_get worker/additional_names || true
        WORKER_ADDITIONAL_NAMES="$RET"
    fi

    # Then try environment variables (override debconf)
    if [ -n "$WORKER_SERVER_ADDRESS_ENV" ]; then
        WORKER_SERVER_ADDRESS="$WORKER_SERVER_ADDRESS_ENV"
    fi

    if [ -n "$WORKER_SERVER_PORT_ENV" ]; then
        WORKER_SERVER_PORT="$WORKER_SERVER_PORT_ENV"
    fi

    if [ -n "$WORKER_ADDITIONAL_NAMES_ENV" ]; then
        WORKER_ADDITIONAL_NAMES="$WORKER_ADDITIONAL_NAMES_ENV"
    fi

    # Finally try config file if it exists
    if [ -f "/tmp/worker-install-config" ]; then
        source /tmp/worker-install-config
        rm -f /tmp/worker-install-config
    fi

    # Use detected IP as ultimate fallback
    if [ -z "$WORKER_SERVER_ADDRESS" ]; then
        WORKER_SERVER_ADDRESS=$(detect_current_ip)
        print_warning "No server address configured, using detected IP: $WORKER_SERVER_ADDRESS"
    fi

    # Set defaults
    WORKER_SERVER_PORT=${WORKER_SERVER_PORT:-50051}
    WORKER_ADDITIONAL_NAMES=${WORKER_ADDITIONAL_NAMES:-}
}

# Function to update SERVER configuration file
update_server_config_file() {
    local config_file="/opt/worker/config/server-config.yml"
    local server_addr="${WORKER_SERVER_ADDRESS}"
    local server_port="${WORKER_SERVER_PORT}"

    if [ -f "$config_file" ]; then
        print_info "Updating server configuration file..."

        # Update server address
        sed -i "s/address: \"[^\"]*\"/address: \"$server_addr\"/" "$config_file"

        # Update server port
        sed -i "s/port: [0-9]*/port: $server_port/" "$config_file"

        print_success "Server configuration updated successfully"
    else
        print_error "Server configuration file not found: $config_file"
    fi
}

# Function to update CLIENT configuration file
update_client_config_file() {
    local config_file="/opt/worker/config/client-config.yml"
    local server_addr="${WORKER_SERVER_ADDRESS}"
    local server_port="${WORKER_SERVER_PORT}"

    if [ -f "$config_file" ]; then
        print_info "Updating client configuration file..."

        # Update default node address
        sed -i "/nodes:/,/default:/{
            /address:/s/address: \"[^\"]*\"/address: \"$server_addr:$server_port\"/
        }" "$config_file"

        # Update production node address (if it exists)
        sed -i "/production:/,/address:/{
            s/address: \"[^\"]*\"/address: \"$server_addr:$server_port\"/
        }" "$config_file"

        print_success "Client configuration updated successfully"
    else
        print_error "Client configuration file not found: $config_file"
    fi
}

# Function to generate certificates
generate_certificates() {
    print_info "Generating SSL certificates..."

    # Export variables for the certificate generation script
    export WORKER_SERVER_ADDRESS
    export WORKER_ADDITIONAL_NAMES

    # Run the certificate generation script
    /usr/local/bin/certs_gen.sh

    print_success "SSL certificates generated successfully"
}

case "$1" in
    configure)
        print_info "üîß Configuring Worker Service..."
        echo

        # Set basic permissions first
        chown -R root:root /opt/worker
        chmod 755 /opt/worker
        chmod 755 /opt/worker/worker
        chmod 755 /opt/worker/worker-cli
        chmod 644 /opt/worker/config/server-config.yml
        chmod 644 /opt/worker/config/client-config.yml
        chmod +x /usr/local/bin/certs_gen.sh

        # Create symlinks
        if [ ! -L /usr/bin/worker ]; then
            ln -sf /opt/worker/worker-cli /usr/bin/worker
        fi
        if [ ! -L /usr/bin/worker-cli ]; then
            ln -sf /opt/worker/worker-cli /usr/bin/worker-cli
        fi

        # Get configuration from debconf/environment
        get_configuration

        print_info "Configuration Summary:"
        echo "  Server Address: $WORKER_SERVER_ADDRESS"
        echo "  Server Port: $WORKER_SERVER_PORT"
        echo "  Additional Names: ${WORKER_ADDITIONAL_NAMES:-none}"
        echo

        # Update both configuration files
        update_server_config_file
        update_client_config_file

        # Generate certificates
        generate_certificates

        # Set certificate permissions
        if [ -d /opt/worker/certs ]; then
            chown -R root:root /opt/worker/certs
            chmod 700 /opt/worker/certs
            chmod 600 /opt/worker/certs/*-key.pem 2>/dev/null || true
            chmod 644 /opt/worker/certs/*-cert.pem 2>/dev/null || true
        fi

        # Create log directory
        mkdir -p /var/log/worker
        chown root:root /var/log/worker
        chmod 755 /var/log/worker

        # Setup cgroup delegation
        if [ -d /sys/fs/cgroup ]; then
            print_info "Setting up cgroup delegation..."
            mkdir -p /sys/fs/cgroup/worker.slice
            echo "+cpu +memory +io +pids" > /sys/fs/cgroup/worker.slice/cgroup.subtree_control 2>/dev/null || true
        fi

        # Enable systemd service
        systemctl daemon-reload
        systemctl enable worker.service

        echo
        print_success "Worker service installed successfully!"
        echo
        print_info "üìÅ Installation Summary:"
        echo "  Server Address: $WORKER_SERVER_ADDRESS"
        echo "  Server Port: $WORKER_SERVER_PORT"
        echo "  Server Config: /opt/worker/config/server-config.yml"
        echo "  Client Config: /opt/worker/config/client-config.yml"
        echo "  Certificates: /opt/worker/certs/"
        echo "  CLI Command: worker-cli --help"
        echo
        print_info "üöÄ Next Steps:"
        echo "  1. Start service: sudo systemctl start worker"
        echo "  2. Check status: sudo systemctl status worker"
        echo "  3. View logs: sudo journalctl -u worker -f"
        echo "  4. Test CLI: worker-cli list"
        echo "  5. Test with config: worker-cli --config=/opt/worker/config/client-config.yml list"
        echo
        print_info "üîß To reconfigure later:"
        echo "  sudo dpkg-reconfigure worker"
        echo
        ;;
esac

exit 0