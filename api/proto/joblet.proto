syntax = "proto3";

option go_package = "./";

package joblet;

service JobletService{
  rpc RunJob(RunJobReq) returns (RunJobRes){}
  rpc GetJobStatus(GetJobStatusReq) returns (GetJobStatusRes){}
  rpc StopJob(StopJobReq) returns (StopJobRes){}
  rpc GetJobLogs(GetJobLogsReq) returns (stream DataChunk);
  rpc ListJobs(EmptyRequest) returns (Jobs){}
}

message Jobs{
  repeated Job jobs = 1;
}

message Job{
  string id = 1;
  string command = 2;
  repeated string args = 3;
  int32 maxCPU = 4;
  int32 maxMemory = 5;
  int32 maxIOBPS = 6;
  string status = 7;
  string startTime = 8;
  string endTime = 9;
  int32 exitCode = 10;
}

message EmptyRequest {}

message RunJobReq{
  string command = 1;
  repeated string args = 2;
  int32 maxCPU = 3;
  int32 maxMemory = 4;
  int32 maxIOBPS = 5;
}

message RunJobRes{
  string id = 1;
  string command = 2;
  repeated string args = 3;
  int32 maxCPU = 4;
  int32 maxMemory = 5;
  int32 maxIOBPS = 6;
  string status = 7;
  string startTime = 8;
  string endTime = 9;
  int32 exitCode = 10;
}

// GetJobStatus
message GetJobStatusReq{
  string id = 1;
}

message GetJobStatusRes{
  string id = 1;
  string command = 2;
  repeated string args = 3;
  int32 maxCPU = 4;
  int32 maxMemory = 5;
  int32 maxIOBPS = 6;
  string status = 7;
  string startTime = 8;
  string endTime = 9;
  int32 exitCode = 10;
}

// StopJob
message StopJobReq{
  string id = 1;
}

message StopJobRes{
  string id = 1;
  string status = 2;
  string endTime = 3;
  int32 exitCode = 4;
}

// GetJobLogs
message GetJobLogsReq{
  string id = 1;
}

message DataChunk {
  bytes payload = 1;
}