syntax = "proto3";

option go_package = "./";

package joblet;

service JobletService{
  rpc RunJob(RunJobReq) returns (RunJobRes){}
  rpc GetJobStatus(GetJobStatusReq) returns (GetJobStatusRes){}
  rpc StopJob(StopJobReq) returns (StopJobRes){}
  rpc GetJobLogs(GetJobLogsReq) returns (stream DataChunk);
  rpc ListJobs(EmptyRequest) returns (Jobs){}

  // Network management
  rpc CreateNetwork(CreateNetworkReq) returns (CreateNetworkRes){}
  rpc ListNetworks(EmptyRequest) returns (Networks){}
  rpc RemoveNetwork(RemoveNetworkReq) returns (RemoveNetworkRes){}
  
  // Volume management
  rpc CreateVolume(CreateVolumeReq) returns (CreateVolumeRes){}
  rpc ListVolumes(EmptyRequest) returns (Volumes){}
  rpc RemoveVolume(RemoveVolumeReq) returns (RemoveVolumeRes){}
}

message Jobs{
  repeated Job jobs = 1;
}

message Job{
  string id = 1;
  string command = 2;
  repeated string args = 3;
  int32 maxCPU = 4;
  string cpuCores = 5;
  int32 maxMemory = 6;
  int32 maxIOBPS = 7;
  string status = 8;
  string startTime = 9;
  string endTime = 10;
  int32 exitCode = 11;
  string scheduledTime = 12;    // When the job should execute (RFC3339 format, empty if immediate)
}

message EmptyRequest {}

message RunJobReq{
  string command = 1;
  repeated string args = 2;
  int32 maxCPU = 3;
  string cpuCores = 4;
  int32 maxMemory = 5;
  int32 maxIOBPS = 6;
  repeated FileUpload uploads = 7;
  string schedule = 8;          // RFC3339 formatted time string
  string network = 9;           // Network name (none, isolated, bridge, or custom)
  repeated string volumes = 10; // Volume names to mount
}

message FileUpload {
  string path = 1;           // Relative path in job workspace
  bytes content = 2;         // File content
  uint32 mode = 3;           // Unix file permissions (e.g., 0644)
  bool isDirectory = 4;      // True if this represents a directory
}

message RunJobRes{
  string id = 1;
  string command = 2;
  repeated string args = 3;
  int32 maxCPU = 4;
  string cpuCores = 5;
  int32 maxMemory = 6;
  int32 maxIOBPS = 7;
  string status = 8;
  string startTime = 9;
  string endTime = 10;
  int32 exitCode = 11;
  string scheduledTime = 12;    // When the job should execute (empty if immediate)
}

// GetJobStatus
message GetJobStatusReq{
  string id = 1;
}

message GetJobStatusRes{
  string id = 1;
  string command = 2;
  repeated string args = 3;
  int32 maxCPU = 4;
  string cpuCores = 5;
  int32 maxMemory = 6;
  int32 maxIOBPS = 7;
  string status = 8;
  string startTime = 9;
  string endTime = 10;
  int32 exitCode = 11;
  string scheduledTime = 12;    // When the job should execute (empty if immediate)
}

// StopJob
message StopJobReq{
  string id = 1;
}

message StopJobRes{
  string id = 1;
  string status = 2;
  string endTime = 3;
  int32 exitCode = 4;
}

// GetJobLogs
message GetJobLogsReq{
  string id = 1;
}

message DataChunk {
  bytes payload = 1;
}

message CreateNetworkReq {
  string name = 1;
  string cidr = 2;
}

message CreateNetworkRes {
  string name = 1;
  string cidr = 2;
  string bridge = 3;
}

message RemoveNetworkReq {
  string name = 1;
}

message RemoveNetworkRes {
  bool success = 1;
  string message = 2;
}

message Network {
  string name = 1;
  string cidr = 2;
  string bridge = 3;
  int32 jobCount = 4;
}

message Networks {
  repeated Network networks = 1;
}

message CreateVolumeReq {
  string name = 1;
  string size = 2;        // Size limit (e.g., "1GB", "500MB")
  string type = 3;        // "filesystem" or "memory"
}

message CreateVolumeRes {
  string name = 1;
  string size = 2;
  string type = 3;
  string path = 4;        // Host path where volume is stored
}

message RemoveVolumeReq {
  string name = 1;
}

message RemoveVolumeRes {
  bool success = 1;
  string message = 2;
}

message Volume {
  string name = 1;
  string size = 2;
  string type = 3;
  string path = 4;
  string createdTime = 5;
  int32 jobCount = 6;     // Number of jobs currently using this volume
}

message Volumes {
  repeated Volume volumes = 1;
}